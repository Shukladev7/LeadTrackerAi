"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import type { FinalStock, BOMRow } from "@/lib/types";
import { useEffect, useState } from "react";
import { PlaceHolderImages } from "@/lib/placeholder-images";
import { BOMEditor } from "@/components/bom-editor";

const formSchema = z.object({
  name: z.string().min(1, "Please enter a name."),
  sku: z.string().min(1, "Please enter a SKU."),
  price: z.coerce.number().min(0, "Price must be 0 or greater."),
  gstRate: z.coerce.number().min(0, "GST Rate must be 0 or greater."),
  imageUrl: z
    .string()
    .url("Please enter a valid URL.")
    .or(z.literal(""))
    .optional(),
  imageHint: z.string(),
});

interface CreateProductFormProps {
  onProductCreated: (product: FinalStock) => void;
}

export function CreateProductForm({
  onProductCreated,
}: CreateProductFormProps) {
  const [isClient, setIsClient] = useState(false);
  const [bomRows, setBomRows] = useState<BOMRow[]>([]);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      sku: "",
      price: 0,
      gstRate: 0,
      imageUrl: "",
      imageHint: "",
    },
  });

  useEffect(() => {
    setIsClient(true);

    const randomPlaceholder =
      PlaceHolderImages[Math.floor(Math.random() * PlaceHolderImages.length)];
    if (randomPlaceholder) {
      form.setValue("imageHint", randomPlaceholder.imageHint);
    }
  }, [form]);

  function onSubmit(values: z.infer<typeof formSchema>) {
    // Validate BOM rows
    const validBomRows = bomRows.filter(
      (row) => row.raw_material_id && row.stage && row.qty_per_piece > 0,
    );

    // Note: id will be generated by Firestore when document is created
    const newProduct: FinalStock = {
      id: "", // Temporary - will be replaced by Firestore-generated ID
      ...values,
      imageUrl:
        values.imageUrl || `https://picsum.photos/seed/${values.name}/400/300`,
      bom_per_piece: validBomRows.length > 0 ? validBomRows : undefined,
      batches: [], // Initialize with empty batches array
      createdAt: new Date().toISOString(),
    };
    onProductCreated(newProduct);
  }

  if (!isClient) {
    return null;
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 pt-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Product Name</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Model X Mainframe" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="sku"
            render={({ field }) => (
              <FormItem>
                <FormLabel>SKU</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., MX-MF-001" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="price"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Unit Price (excl. GST)</FormLabel>
                <FormControl>
                  <Input type="number" placeholder="0.00" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="gstRate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>GST Rate (%)</FormLabel>
                <FormControl>
                  <Input type="number" placeholder="0" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="imageUrl"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Image URL (Optional)</FormLabel>
              <FormControl>
                <Input placeholder="https://..." {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* BOM Editor */}
        <div className="border-t pt-6">
          <BOMEditor bomRows={bomRows} onBOMChange={setBomRows} />
        </div>

        <div className="flex justify-end">
          <Button type="submit">Add Product</Button>
        </div>
      </form>
    </Form>
  );
}
