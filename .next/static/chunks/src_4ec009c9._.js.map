{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firebase.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\nimport { getAuth, connectAuthEmulator } from \"firebase/auth\";\nimport { getStorage, connectStorageEmulator } from \"firebase/storage\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCjA4ek_FRNB61JM7xrYAT3s1eoL94qhnE\",\n  authDomain: \"studio-5063047183-aa053.firebaseapp.com\",\n  projectId: \"studio-5063047183-aa053\",\n  storageBucket: \"studio-5063047183-aa053.firebasestorage.app\",\n  messagingSenderId: \"311176415853\",\n  appId: \"1:311176415853:web:52798531c528415cf94d64\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\nexport const storage = getStorage(app);\n\n// Connect to emulators in development (optional)\nif (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {\n  // Only connect to emulators if they haven't been connected already\n  try {\n    // Uncomment these lines if you want to use Firebase emulators in development\n    // connectFirestoreEmulator(db, 'localhost', 8080);\n    // connectAuthEmulator(auth, 'http://localhost:9099');\n    // connectStorageEmulator(storage, 'localhost', 9199);\n  } catch (error) {\n    console.log('Emulators already connected or not available');\n  }\n}\n\nexport default app;\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;;;AAyBnD;AAxBJ;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;AAEA,wCAAwC;AACxC,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AAGnB,MAAM,KAAK,CAAA,GAAA,sKAAA,CAAA,eAAY,AAAD,EAAE;AACxB,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,UAAU,CAAA,GAAA,oKAAA,CAAA,aAAU,AAAD,EAAE;AAElC,iDAAiD;AACjD,wCAA6E;IAC3E,mEAAmE;IACnE,IAAI;IACF,6EAA6E;IAC7E,mDAAmD;IACnD,sDAAsD;IACtD,sDAAsD;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;IACd;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-service.ts"],"sourcesContent":["import {\n  collection,\n  doc,\n  addDoc,\n  getDoc,\n  getDocs,\n  updateDoc,\n  deleteDoc,\n  setDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  startAfter,\n  onSnapshot,\n  writeBatch,\n  runTransaction,\n  serverTimestamp,\n  Timestamp,\n  DocumentReference,\n  Query,\n  QuerySnapshot,\n  DocumentSnapshot,\n  Unsubscribe,\n  WhereFilterOp\n} from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport { FirestoreDocument, QueryOptions, PaginationResult } from \"./firestore-types\";\n\n/**\n * Generic Firestore service class for CRUD operations\n */\nexport class FirestoreService<T extends FirestoreDocument> {\n  private collectionName: string;\n\n  constructor(collectionName: string) {\n    this.collectionName = collectionName;\n  }\n\n  /**\n   * Create a new document\n   */\n  async create(data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const docData = {\n        ...data,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n      \n      const docRef = await addDoc(collection(db, this.collectionName), docData);\n      return docRef.id;\n    } catch (error) {\n      console.error(`Error creating document in ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a document with a specific ID\n   */\n  async createWithId(id: string, data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<void> {\n    try {\n      const docData = {\n        ...data,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n      \n      const docRef = doc(db, this.collectionName, id);\n      await setDoc(docRef, docData);\n    } catch (error) {\n      console.error(`Error creating document with ID ${id} in ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get a document by ID\n   */\n  async getById(id: string): Promise<T | null> {\n    try {\n      const docRef = doc(db, this.collectionName, id);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return {\n          id: docSnap.id,\n          ...docSnap.data(),\n        } as T;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Error getting document ${id} from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all documents\n   */\n  async getAll(): Promise<T[]> {\n    try {\n      const querySnapshot = await getDocs(collection(db, this.collectionName));\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as T[];\n    } catch (error) {\n      console.error(`Error getting all documents from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get documents with query options\n   */\n  async getWithQuery(options: QueryOptions = {}): Promise<T[]> {\n    try {\n      let q = collection(db, this.collectionName) as Query;\n\n      // Apply where conditions\n      if (options.where) {\n        options.where.forEach(condition => {\n          q = query(q, where(condition.field, condition.operator as WhereFilterOp, condition.value));\n        });\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        q = query(q, orderBy(options.orderBy.field, options.orderBy.direction));\n      }\n\n      // Apply limit\n      if (options.limit) {\n        q = query(q, limit(options.limit));\n      }\n\n      // Apply pagination\n      if (options.startAfter) {\n        q = query(q, startAfter(options.startAfter));\n      }\n\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as T[];\n    } catch (error) {\n      console.error(`Error querying documents from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get paginated results\n   */\n  async getPaginated(options: QueryOptions & { pageSize: number }): Promise<PaginationResult<T>> {\n    try {\n      const queryOptions = { ...options, limit: options.pageSize };\n      const documents = await this.getWithQuery(queryOptions);\n      \n      const hasMore = documents.length === options.pageSize;\n      const lastDoc = documents.length > 0 ? documents[documents.length - 1] : undefined;\n\n      return {\n        data: documents,\n        hasMore,\n        lastDoc,\n      };\n    } catch (error) {\n      console.error(`Error getting paginated documents from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update a document\n   */\n  async update(id: string, data: Partial<Omit<T, 'id' | 'createdAt'>>): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, id);\n      const updateData = {\n        ...data,\n        updatedAt: serverTimestamp(),\n      };\n      \n      await updateDoc(docRef, updateData);\n    } catch (error) {\n      console.error(`Error updating document ${id} in ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a document\n   */\n  async delete(id: string): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, id);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error(`Error deleting document ${id} from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete multiple documents\n   */\n  async deleteMultiple(ids: string[]): Promise<void> {\n    try {\n      const batch = writeBatch(db);\n      \n      ids.forEach(id => {\n        const docRef = doc(db, this.collectionName, id);\n        batch.delete(docRef);\n      });\n      \n      await batch.commit();\n    } catch (error) {\n      console.error(`Error deleting multiple documents from ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Listen to real-time updates for a document\n   */\n  onDocumentSnapshot(id: string, callback: (doc: T | null) => void): Unsubscribe {\n    const docRef = doc(db, this.collectionName, id);\n    \n    return onSnapshot(docRef, (docSnap) => {\n      if (docSnap.exists()) {\n        const document = {\n          id: docSnap.id,\n          ...docSnap.data(),\n        } as T;\n        callback(document);\n      } else {\n        callback(null);\n      }\n    }, (error) => {\n      console.error(`Error listening to document ${id} in ${this.collectionName}:`, error);\n    });\n  }\n\n  /**\n   * Listen to real-time updates for a collection\n   */\n  onCollectionSnapshot(options: QueryOptions = {}, callback: (docs: T[]) => void): Unsubscribe {\n    let q = collection(db, this.collectionName) as Query;\n\n    // Apply query options (similar to getWithQuery)\n    if (options.where) {\n      options.where.forEach(condition => {\n        q = query(q, where(condition.field, condition.operator as WhereFilterOp, condition.value));\n      });\n    }\n\n    if (options.orderBy) {\n      q = query(q, orderBy(options.orderBy.field, options.orderBy.direction));\n    }\n\n    if (options.limit) {\n      q = query(q, limit(options.limit));\n    }\n\n    return onSnapshot(q, (querySnapshot) => {\n      const documents = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as T[];\n      callback(documents);\n    }, (error) => {\n      console.error(`Error listening to collection ${this.collectionName}:`, error);\n    });\n  }\n\n  /**\n   * Batch write operations\n   */\n  async batchWrite(operations: Array<{\n    type: 'create' | 'update' | 'delete';\n    id?: string;\n    data?: Partial<T>;\n  }>): Promise<void> {\n    try {\n      const batch = writeBatch(db);\n\n      operations.forEach(operation => {\n        switch (operation.type) {\n          case 'create':\n            if (operation.id && operation.data) {\n              const docRef = doc(db, this.collectionName, operation.id);\n              batch.set(docRef, {\n                ...operation.data,\n                createdAt: serverTimestamp(),\n                updatedAt: serverTimestamp(),\n              });\n            }\n            break;\n          case 'update':\n            if (operation.id && operation.data) {\n              const docRef = doc(db, this.collectionName, operation.id);\n              batch.update(docRef, {\n                ...operation.data,\n                updatedAt: serverTimestamp(),\n              });\n            }\n            break;\n          case 'delete':\n            if (operation.id) {\n              const docRef = doc(db, this.collectionName, operation.id);\n              batch.delete(docRef);\n            }\n            break;\n        }\n      });\n\n      await batch.commit();\n    } catch (error) {\n      console.error(`Error performing batch operations on ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Transaction example\n   */\n  async runTransaction<R>(\n    updateFunction: (transaction: any) => Promise<R>\n  ): Promise<R> {\n    try {\n      return await runTransaction(db, updateFunction);\n    } catch (error) {\n      console.error(`Error running transaction on ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Count documents (Note: This is an expensive operation for large collections)\n   */\n  async count(options: QueryOptions = {}): Promise<number> {\n    try {\n      const documents = await this.getWithQuery(options);\n      return documents.length;\n    } catch (error) {\n      console.error(`Error counting documents in ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if document exists\n   */\n  async exists(id: string): Promise<boolean> {\n    try {\n      const docRef = doc(db, this.collectionName, id);\n      const docSnap = await getDoc(docRef);\n      return docSnap.exists();\n    } catch (error) {\n      console.error(`Error checking if document ${id} exists in ${this.collectionName}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Utility functions\nexport const createTimestamp = () => Timestamp.now();\nexport const serverTime = () => serverTimestamp();\n\n// Helper function to convert Firestore timestamp to Date\nexport const timestampToDate = (timestamp: Timestamp): Date => {\n  return timestamp.toDate();\n};\n\n// Helper function to format timestamp\nexport const formatTimestamp = (timestamp: Timestamp, locale = 'en-US'): string => {\n  return timestamp.toDate().toLocaleDateString(locale);\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/business-types.ts"],"sourcesContent":["import { Timestamp } from \"firebase/firestore\";\n\n// Base interface for all business documents\nexport interface BusinessDocument {\n  id?: string;\n  createdAt?: Timestamp | string;\n  updatedAt?: Timestamp;\n}\n\n// Employee interface\nexport interface Employee extends BusinessDocument {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n  isActive?: boolean;\n  hireDate?: Timestamp | string;\n  salary?: number;\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n}\n\n// Department interface\nexport interface Department extends BusinessDocument {\n  name: string;\n  description?: string;\n  managerId?: string;\n  budget?: number;\n  employeeCount?: number;\n}\n\n// Employee Role interface\nexport interface EmployeeRole extends BusinessDocument {\n  name: string;\n  description?: string;\n  permissions?: string[];\n  level?: number;\n}\n\n// Lead Source interface\nexport interface LeadSource extends BusinessDocument {\n  name: string;\n  description?: string;\n  isActive?: boolean;\n  cost?: number;\n  conversionRate?: number;\n}\n\n// Product interface\nexport interface Product extends BusinessDocument {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n  category?: string;\n  isActive?: boolean;\n  stockQuantity?: number;\n  minStockLevel?: number;\n  supplier?: string;\n  tags?: string[];\n}\n\n// Lead Activity interface\nexport interface LeadActivity {\n  id: string;\n  date: Timestamp | string;\n  type: 'Email' | 'Call' | 'Meeting' | 'Proposal Sent' | 'Revision Request' | 'Negotiation' | 'Follow-up' | 'Other';\n  notes: string;\n  userId?: string;\n  attachments?: string[];\n}\n\n// Lead Product interface\nexport interface LeadProduct {\n  productId: string;\n  quantity: number;\n  rate: number;\n  discount?: number;\n  notes?: string;\n}\n\n// Lead interface\nexport interface Lead extends BusinessDocument {\n  name: string;\n  company: string;\n  email: string;\n  phone: string;\n  whatsappNumber?: string;\n  status: 'New' | 'In Discussion' | 'Negotiation' | 'Closed - Won' | 'Closed - Lost' | 'On Hold';\n  source: string;\n  products: LeadProduct[];\n  activities: LeadActivity[];\n  assignedTo?: string;\n  priority?: 'Low' | 'Medium' | 'High' | 'Urgent';\n  expectedCloseDate?: Timestamp | string;\n  estimatedValue?: number;\n  tags?: string[];\n  customFields?: Record<string, any>;\n}\n\n// Quotation Product interface\nexport interface QuotationProduct {\n  productId: string;\n  quantity: number;\n  rate: number;\n  gstRate: number;\n  discount?: number;\n  total?: number;\n}\n\n// Quotation Template interface\nexport interface QuotationTemplate extends BusinessDocument {\n  name: string;\n  companyName: string;\n  companyAddress: string;\n  companyGst: string;\n  termsAndConditions: string;\n  logoUrl?: string;\n  isDefault?: boolean;\n  emailTemplate?: string;\n  footerText?: string;\n}\n\n// Quotation interface\nexport interface Quotation extends BusinessDocument {\n  leadId: string;\n  templateId: string;\n  quotationNumber: string;\n  date: string;\n  validUntil: string;\n  status: 'Draft' | 'Sent' | 'Accepted' | 'Rejected' | 'Expired';\n  products: QuotationProduct[];\n  subTotal: number;\n  totalGst: number;\n  grandTotal: number;\n  discount?: number;\n  companyName?: string;\n  companyAddress?: string;\n  companyGst?: string;\n  termsAndConditions?: string;\n  logoUrl?: string;\n  notes?: string;\n  sentAt?: Timestamp | string;\n  acceptedAt?: Timestamp | string;\n  rejectedAt?: Timestamp | string;\n}\n\n// Customer interface (derived from successful leads)\nexport interface Customer extends BusinessDocument {\n  name: string;\n  company: string;\n  email: string;\n  phone: string;\n  whatsappNumber?: string;\n  address?: string;\n  gstNumber?: string;\n  contactPerson?: string;\n  leadId?: string; // Reference to original lead\n  totalValue?: number;\n  lastOrderDate?: Timestamp | string;\n  status: 'Active' | 'Inactive' | 'Blocked';\n  paymentTerms?: string;\n  creditLimit?: number;\n  tags?: string[];\n}\n\n// Order interface\nexport interface Order extends BusinessDocument {\n  customerId: string;\n  quotationId?: string;\n  orderNumber: string;\n  orderDate: Timestamp | string;\n  expectedDeliveryDate?: Timestamp | string;\n  actualDeliveryDate?: Timestamp | string;\n  status: 'Pending' | 'Confirmed' | 'In Production' | 'Ready' | 'Shipped' | 'Delivered' | 'Cancelled';\n  products: QuotationProduct[];\n  subTotal: number;\n  totalGst: number;\n  grandTotal: number;\n  discount?: number;\n  shippingAddress?: string;\n  billingAddress?: string;\n  paymentStatus: 'Pending' | 'Partial' | 'Paid' | 'Overdue';\n  paymentMethod?: string;\n  notes?: string;\n  assignedTo?: string;\n}\n\n// Invoice interface\nexport interface Invoice extends BusinessDocument {\n  orderId: string;\n  customerId: string;\n  invoiceNumber: string;\n  invoiceDate: Timestamp | string;\n  dueDate: Timestamp | string;\n  status: 'Draft' | 'Sent' | 'Paid' | 'Overdue' | 'Cancelled';\n  products: QuotationProduct[];\n  subTotal: number;\n  totalGst: number;\n  grandTotal: number;\n  amountPaid?: number;\n  balanceAmount?: number;\n  paymentTerms?: string;\n  notes?: string;\n}\n\n// Payment interface\nexport interface Payment extends BusinessDocument {\n  invoiceId: string;\n  customerId: string;\n  amount: number;\n  paymentDate: Timestamp | string;\n  paymentMethod: 'Cash' | 'Cheque' | 'Bank Transfer' | 'UPI' | 'Card' | 'Other';\n  referenceNumber?: string;\n  notes?: string;\n  status: 'Pending' | 'Cleared' | 'Failed' | 'Cancelled';\n}\n\n// Task interface\nexport interface Task extends BusinessDocument {\n  title: string;\n  description?: string;\n  assignedTo: string;\n  assignedBy?: string;\n  dueDate?: Timestamp | string;\n  priority: 'Low' | 'Medium' | 'High' | 'Urgent';\n  status: 'Todo' | 'In Progress' | 'Review' | 'Done' | 'Cancelled';\n  category?: string;\n  tags?: string[];\n  relatedTo?: {\n    type: 'lead' | 'customer' | 'order' | 'quotation';\n    id: string;\n  };\n  completedAt?: Timestamp | string;\n  estimatedHours?: number;\n  actualHours?: number;\n}\n\n// Company Settings interface\nexport interface CompanySettings extends BusinessDocument {\n  companyName: string;\n  companyAddress: string;\n  companyPhone: string;\n  companyEmail: string;\n  companyWebsite?: string;\n  gstNumber: string;\n  logoUrl?: string;\n  currency: string;\n  timezone: string;\n  fiscalYearStart: string;\n  defaultPaymentTerms: string;\n  emailSignature?: string;\n  bankDetails?: {\n    bankName: string;\n    accountNumber: string;\n    ifscCode: string;\n    accountHolderName: string;\n  };\n}\n\n// Analytics/Dashboard data interfaces\nexport interface DashboardMetrics {\n  totalLeads: number;\n  activeLeads: number;\n  convertedLeads: number;\n  totalRevenue: number;\n  monthlyRevenue: number;\n  pendingQuotations: number;\n  overdueInvoices: number;\n  topProducts: Array<{\n    productId: string;\n    productName: string;\n    totalSold: number;\n    revenue: number;\n  }>;\n  leadsBySource: Array<{\n    source: string;\n    count: number;\n    conversionRate: number;\n  }>;\n  salesByMonth: Array<{\n    month: string;\n    revenue: number;\n    orders: number;\n  }>;\n}\n\n// Notification interface\nexport interface Notification extends BusinessDocument {\n  userId: string;\n  title: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  isRead: boolean;\n  actionUrl?: string;\n  relatedTo?: {\n    type: string;\n    id: string;\n  };\n}\n\n// User Activity Log interface\nexport interface ActivityLog extends BusinessDocument {\n  userId: string;\n  action: string;\n  entityType: string;\n  entityId: string;\n  details?: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Collection names constants\nexport const COLLECTIONS = {\n  EMPLOYEES: 'employees',\n  DEPARTMENTS: 'departments',\n  EMPLOYEE_ROLES: 'employeeRoles',\n  LEAD_SOURCES: 'leadSources',\n  PRODUCTS: 'products',\n  LEADS: 'leads',\n  QUOTATIONS: 'quotations',\n  QUOTATION_TEMPLATES: 'quotationTemplates',\n  CUSTOMERS: 'customers',\n  ORDERS: 'orders',\n  INVOICES: 'invoices',\n  PAYMENTS: 'payments',\n  TASKS: 'tasks',\n  COMPANY_SETTINGS: 'companySettings',\n  NOTIFICATIONS: 'notifications',\n  ACTIVITY_LOGS: 'activityLogs',\n} as const;\n\n// Type for collection names\nexport type CollectionName = typeof COLLECTIONS[keyof typeof COLLECTIONS];\n"],"names":[],"mappings":";;;AAgUO,MAAM,cAAc;IACzB,WAAW;IACX,aAAa;IACb,gBAAgB;IAChB,cAAc;IACd,UAAU;IACV,OAAO;IACP,YAAY;IACZ,qBAAqB;IACrB,WAAW;IACX,QAAQ;IACR,UAAU;IACV,UAAU;IACV,OAAO;IACP,kBAAkB;IAClB,eAAe;IACf,eAAe;AACjB","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/business-services.ts"],"sourcesContent":["import { FirestoreService } from './firestore-service';\nimport {\n  Employee,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  Product,\n  Lead,\n  Quotation,\n  QuotationTemplate,\n  Customer,\n  Order,\n  Invoice,\n  Payment,\n  Task,\n  CompanySettings,\n  Notification,\n  ActivityLog,\n  COLLECTIONS\n} from './business-types';\n\n// Create service instances for all business collections\nexport const employeesService = new FirestoreService<Employee>(COLLECTIONS.EMPLOYEES);\nexport const departmentsService = new FirestoreService<Department>(COLLECTIONS.DEPARTMENTS);\nexport const employeeRolesService = new FirestoreService<EmployeeRole>(COLLECTIONS.EMPLOYEE_ROLES);\nexport const leadSourcesService = new FirestoreService<LeadSource>(COLLECTIONS.LEAD_SOURCES);\nexport const productsService = new FirestoreService<Product>(COLLECTIONS.PRODUCTS);\nexport const leadsService = new FirestoreService<Lead>(COLLECTIONS.LEADS);\nexport const quotationsService = new FirestoreService<Quotation>(COLLECTIONS.QUOTATIONS);\nexport const quotationTemplatesService = new FirestoreService<QuotationTemplate>(COLLECTIONS.QUOTATION_TEMPLATES);\nexport const customersService = new FirestoreService<Customer>(COLLECTIONS.CUSTOMERS);\nexport const ordersService = new FirestoreService<Order>(COLLECTIONS.ORDERS);\nexport const invoicesService = new FirestoreService<Invoice>(COLLECTIONS.INVOICES);\nexport const paymentsService = new FirestoreService<Payment>(COLLECTIONS.PAYMENTS);\nexport const tasksService = new FirestoreService<Task>(COLLECTIONS.TASKS);\nexport const companySettingsService = new FirestoreService<CompanySettings>(COLLECTIONS.COMPANY_SETTINGS);\nexport const notificationsService = new FirestoreService<Notification>(COLLECTIONS.NOTIFICATIONS);\nexport const activityLogsService = new FirestoreService<ActivityLog>(COLLECTIONS.ACTIVITY_LOGS);\n\n// Extended service classes with business logic\nexport class EmployeeService extends FirestoreService<Employee> {\n  constructor() {\n    super(COLLECTIONS.EMPLOYEES);\n  }\n\n  async getEmployeeByEmail(email: string): Promise<Employee | null> {\n    const employees = await this.getWithQuery({\n      where: [{ field: 'email', operator: '==', value: email }],\n      limit: 1\n    });\n    return employees.length > 0 ? employees[0] : null;\n  }\n\n  async getEmployeesByDepartment(department: string): Promise<Employee[]> {\n    return this.getWithQuery({\n      where: [{ field: 'department', operator: '==', value: department }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n\n  async getEmployeesByRole(role: string): Promise<Employee[]> {\n    return this.getWithQuery({\n      where: [{ field: 'role', operator: '==', value: role }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n\n  async getActiveEmployees(): Promise<Employee[]> {\n    return this.getWithQuery({\n      where: [{ field: 'isActive', operator: '==', value: true }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n}\n\nexport class LeadService extends FirestoreService<Lead> {\n  constructor() {\n    super(COLLECTIONS.LEADS);\n  }\n\n  async getLeadsByStatus(status: Lead['status']): Promise<Lead[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: status }],\n      orderBy: { field: 'createdAt', direction: 'desc' }\n    });\n  }\n\n  async getLeadsBySource(source: string): Promise<Lead[]> {\n    return this.getWithQuery({\n      where: [{ field: 'source', operator: '==', value: source }],\n      orderBy: { field: 'createdAt', direction: 'desc' }\n    });\n  }\n\n  async getLeadsByAssignee(assignedTo: string): Promise<Lead[]> {\n    return this.getWithQuery({\n      where: [{ field: 'assignedTo', operator: '==', value: assignedTo }],\n      orderBy: { field: 'createdAt', direction: 'desc' }\n    });\n  }\n\n  async getRecentLeads(limit: number = 10): Promise<Lead[]> {\n    return this.getWithQuery({\n      orderBy: { field: 'createdAt', direction: 'desc' },\n      limit\n    });\n  }\n\n  async addActivity(leadId: string, activity: Omit<Lead['activities'][0], 'id'>): Promise<void> {\n    const lead = await this.getById(leadId);\n    if (lead) {\n      const newActivity = {\n        ...activity,\n        id: `act-${leadId}-${Date.now()}`\n      };\n      \n      const updatedActivities = [...(lead.activities || []), newActivity];\n      await this.update(leadId, { activities: updatedActivities });\n    }\n  }\n\n  async updateStatus(leadId: string, status: Lead['status'], notes?: string): Promise<void> {\n    await this.update(leadId, { status });\n    \n    if (notes) {\n      await this.addActivity(leadId, {\n        date: new Date().toISOString(),\n        type: 'Other',\n        notes: `Status changed to ${status}. ${notes}`\n      });\n    }\n  }\n}\n\nexport class ProductService extends FirestoreService<Product> {\n  constructor() {\n    super(COLLECTIONS.PRODUCTS);\n  }\n\n  async getActiveProducts(): Promise<Product[]> {\n    return this.getWithQuery({\n      where: [{ field: 'isActive', operator: '==', value: true }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return this.getWithQuery({\n      where: [{ field: 'category', operator: '==', value: category }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n\n  async getLowStockProducts(): Promise<Product[]> {\n    const products = await this.getAll();\n    return products.filter(product => \n      product.stockQuantity !== undefined && \n      product.minStockLevel !== undefined && \n      product.stockQuantity <= product.minStockLevel\n    );\n  }\n\n  async updateStock(productId: string, quantity: number): Promise<void> {\n    await this.update(productId, { stockQuantity: quantity });\n  }\n\n  async searchProducts(searchTerm: string): Promise<Product[]> {\n    const products = await this.getActiveProducts();\n    return products.filter(product => \n      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (product.tags && product.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())))\n    );\n  }\n}\n\nexport class QuotationService extends FirestoreService<Quotation> {\n  constructor() {\n    super(COLLECTIONS.QUOTATIONS);\n  }\n\n  async getQuotationsByLead(leadId: string): Promise<Quotation[]> {\n    return this.getWithQuery({\n      where: [{ field: 'leadId', operator: '==', value: leadId }],\n      orderBy: { field: 'createdAt', direction: 'desc' }\n    });\n  }\n\n  async getQuotationsByStatus(status: Quotation['status']): Promise<Quotation[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: status }],\n      orderBy: { field: 'createdAt', direction: 'desc' }\n    });\n  }\n\n  async getRecentQuotations(limit: number = 10): Promise<Quotation[]> {\n    return this.getWithQuery({\n      orderBy: { field: 'createdAt', direction: 'desc' },\n      limit\n    });\n  }\n\n  async generateQuotationNumber(): Promise<string> {\n    const quotations = await this.getAll();\n    const maxNumber = quotations.reduce((max, quotation) => {\n      const match = quotation.quotationNumber.match(/QUO-(\\d+)/);\n      if (match) {\n        const num = parseInt(match[1]);\n        return num > max ? num : max;\n      }\n      return max;\n    }, 0);\n    \n    return `QUO-${String(maxNumber + 1).padStart(4, '0')}`;\n  }\n\n  async markAsSent(quotationId: string): Promise<void> {\n    await this.update(quotationId, {\n      status: 'Sent',\n      sentAt: new Date().toISOString()\n    });\n  }\n\n  async markAsAccepted(quotationId: string): Promise<void> {\n    await this.update(quotationId, {\n      status: 'Accepted',\n      acceptedAt: new Date().toISOString()\n    });\n  }\n}\n\nexport class CustomerService extends FirestoreService<Customer> {\n  constructor() {\n    super(COLLECTIONS.CUSTOMERS);\n  }\n\n  async getCustomerByEmail(email: string): Promise<Customer | null> {\n    const customers = await this.getWithQuery({\n      where: [{ field: 'email', operator: '==', value: email }],\n      limit: 1\n    });\n    return customers.length > 0 ? customers[0] : null;\n  }\n\n  async getActiveCustomers(): Promise<Customer[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: 'Active' }],\n      orderBy: { field: 'name', direction: 'asc' }\n    });\n  }\n\n  async getTopCustomers(limit: number = 10): Promise<Customer[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: 'Active' }],\n      orderBy: { field: 'totalValue', direction: 'desc' },\n      limit\n    });\n  }\n\n  async createFromLead(lead: Lead): Promise<string> {\n    const customer: Omit<Customer, 'id' | 'createdAt' | 'updatedAt'> = {\n      name: lead.name,\n      company: lead.company,\n      email: lead.email,\n      phone: lead.phone,\n      whatsappNumber: lead.whatsappNumber,\n      leadId: lead.id,\n      status: 'Active',\n      totalValue: 0\n    };\n    \n    return this.create(customer);\n  }\n}\n\nexport class OrderService extends FirestoreService<Order> {\n  constructor() {\n    super(COLLECTIONS.ORDERS);\n  }\n\n  async getOrdersByCustomer(customerId: string): Promise<Order[]> {\n    return this.getWithQuery({\n      where: [{ field: 'customerId', operator: '==', value: customerId }],\n      orderBy: { field: 'orderDate', direction: 'desc' }\n    });\n  }\n\n  async getOrdersByStatus(status: Order['status']): Promise<Order[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: status }],\n      orderBy: { field: 'orderDate', direction: 'desc' }\n    });\n  }\n\n  async getRecentOrders(limit: number = 10): Promise<Order[]> {\n    return this.getWithQuery({\n      orderBy: { field: 'orderDate', direction: 'desc' },\n      limit\n    });\n  }\n\n  async generateOrderNumber(): Promise<string> {\n    const orders = await this.getAll();\n    const maxNumber = orders.reduce((max, order) => {\n      const match = order.orderNumber.match(/ORD-(\\d+)/);\n      if (match) {\n        const num = parseInt(match[1]);\n        return num > max ? num : max;\n      }\n      return max;\n    }, 0);\n    \n    return `ORD-${String(maxNumber + 1).padStart(4, '0')}`;\n  }\n\n  async updateStatus(orderId: string, status: Order['status']): Promise<void> {\n    const updateData: Partial<Order> = { status };\n    \n    if (status === 'Delivered') {\n      updateData.actualDeliveryDate = new Date().toISOString();\n    }\n    \n    await this.update(orderId, updateData);\n  }\n}\n\nexport class TaskService extends FirestoreService<Task> {\n  constructor() {\n    super(COLLECTIONS.TASKS);\n  }\n\n  async getTasksByAssignee(assignedTo: string): Promise<Task[]> {\n    return this.getWithQuery({\n      where: [{ field: 'assignedTo', operator: '==', value: assignedTo }],\n      orderBy: { field: 'dueDate', direction: 'asc' }\n    });\n  }\n\n  async getTasksByStatus(status: Task['status']): Promise<Task[]> {\n    return this.getWithQuery({\n      where: [{ field: 'status', operator: '==', value: status }],\n      orderBy: { field: 'dueDate', direction: 'asc' }\n    });\n  }\n\n  async getOverdueTasks(): Promise<Task[]> {\n    const now = new Date().toISOString();\n    const tasks = await this.getWithQuery({\n      where: [\n        { field: 'status', operator: '!=', value: 'Done' },\n        { field: 'status', operator: '!=', value: 'Cancelled' }\n      ]\n    });\n    \n    return tasks.filter(task => \n      task.dueDate && task.dueDate < now\n    );\n  }\n\n  async markAsCompleted(taskId: string): Promise<void> {\n    await this.update(taskId, {\n      status: 'Done',\n      completedAt: new Date().toISOString()\n    });\n  }\n}\n\n// Create instances of extended services\nexport const employeeService = new EmployeeService();\nexport const leadService = new LeadService();\nexport const productService = new ProductService();\nexport const quotationService = new QuotationService();\nexport const customerService = new CustomerService();\nexport const orderService = new OrderService();\nexport const taskService = new TaskService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 964, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/migrate-to-firestore.ts"],"sourcesContent":["import { serverTimestamp, Timestamp } from 'firebase/firestore';\nimport {\n  employeesService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  productsService,\n  leadsService,\n  quotationsService,\n  quotationTemplatesService\n} from './business-services';\n\n// Import JSON data\nimport employeesData from './data/employees.json';\nimport departmentsData from './data/departments.json';\nimport employeeRolesData from './data/employee-roles.json';\nimport leadSourcesData from './data/lead-sources.json';\nimport productsData from './data/products.json';\nimport leadsData from './data/leads.json';\nimport quotationsData from './data/quotations.json';\nimport quotationTemplatesData from './data/quotation-templates.json';\n\ninterface MigrationResult {\n  collection: string;\n  success: number;\n  failed: number;\n  errors: string[];\n}\n\ninterface MigrationSummary {\n  totalCollections: number;\n  totalDocuments: number;\n  successfulDocuments: number;\n  failedDocuments: number;\n  results: MigrationResult[];\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n}\n\nexport class FirestoreMigration {\n  private results: MigrationResult[] = [];\n  private summary: MigrationSummary;\n\n  constructor() {\n    this.summary = {\n      totalCollections: 0,\n      totalDocuments: 0,\n      successfulDocuments: 0,\n      failedDocuments: 0,\n      results: [],\n      startTime: new Date()\n    };\n  }\n\n  // Helper function to convert date strings to Firestore timestamps\n  private convertToTimestamp(dateString: string | undefined): Timestamp | undefined {\n    if (!dateString) return undefined;\n    try {\n      return Timestamp.fromDate(new Date(dateString));\n    } catch (error) {\n      console.warn('Failed to convert date:', dateString);\n      return undefined;\n    }\n  }\n\n  // Helper function to generate new ID if needed\n  private generateId(prefix: string): string {\n    return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Migrate employees\n  async migrateEmployees(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'employees',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('🏢 Migrating employees...');\n\n    for (const employee of employeesData) {\n      try {\n        const employeeData = {\n          ...employee,\n          createdAt: this.convertToTimestamp(employee.createdAt) || serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          isActive: true // Default to active\n        };\n\n        // Use existing ID or generate new one\n        const id = employee.id || this.generateId('emp');\n        await employeesService.createWithId(id, employeeData);\n        \n        result.success++;\n        console.log(`✅ Migrated employee: ${employee.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate employee ${employee.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate departments\n  async migrateDepartments(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'departments',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('🏬 Migrating departments...');\n\n    for (const department of departmentsData) {\n      try {\n        const departmentData = {\n          ...department,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp()\n        };\n\n        const id = department.id || this.generateId('dept');\n        await departmentsService.createWithId(id, departmentData);\n        \n        result.success++;\n        console.log(`✅ Migrated department: ${department.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate department ${department.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate employee roles\n  async migrateEmployeeRoles(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'employeeRoles',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('👔 Migrating employee roles...');\n\n    for (const role of employeeRolesData) {\n      try {\n        const roleData = {\n          ...role,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp()\n        };\n\n        const id = role.id || this.generateId('role');\n        await employeeRolesService.createWithId(id, roleData);\n        \n        result.success++;\n        console.log(`✅ Migrated role: ${role.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate role ${role.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate lead sources\n  async migrateLeadSources(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'leadSources',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('📊 Migrating lead sources...');\n\n    for (const source of leadSourcesData) {\n      try {\n        const sourceData = {\n          ...source,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          isActive: true\n        };\n\n        const id = source.id || this.generateId('source');\n        await leadSourcesService.createWithId(id, sourceData);\n        \n        result.success++;\n        console.log(`✅ Migrated lead source: ${source.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate lead source ${source.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate products\n  async migrateProducts(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'products',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('📦 Migrating products...');\n\n    for (const product of productsData) {\n      try {\n        const productData = {\n          ...product,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          isActive: true,\n          stockQuantity: 100, // Default stock\n          minStockLevel: 10   // Default minimum stock\n        };\n\n        const id = product.id || this.generateId('prod');\n        await productsService.createWithId(id, productData);\n        \n        result.success++;\n        console.log(`✅ Migrated product: ${product.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate product ${product.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate leads\n  async migrateLeads(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'leads',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('🎯 Migrating leads...');\n\n    for (const lead of leadsData) {\n      try {\n        // Convert activities timestamps\n        const activities = lead.activities?.map(activity => ({\n          ...activity,\n          type: activity.type as any, // Cast activity type\n          date: this.convertToTimestamp(activity.date) || activity.date\n        })) || [];\n\n        const leadData = {\n          ...lead,\n          status: lead.status as any, // Cast to avoid TypeScript strict checking during migration\n          createdAt: this.convertToTimestamp(lead.createdAt) || serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          activities,\n          priority: 'Medium' as const, // Default priority\n          estimatedValue: lead.products?.reduce((sum, product) => \n            sum + (product.quantity * product.rate), 0) || 0\n        };\n\n        const id = lead.id || this.generateId('lead');\n        await leadsService.createWithId(id, leadData);\n        \n        result.success++;\n        console.log(`✅ Migrated lead: ${lead.name} (${lead.company})`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate lead ${lead.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate quotations\n  async migrateQuotations(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'quotations',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('📋 Migrating quotations...');\n\n    for (const quotation of quotationsData) {\n      try {\n        const quotationData = {\n          ...quotation,\n          status: quotation.status as any, // Cast status for migration\n          createdAt: this.convertToTimestamp(quotation.createdAt) || serverTimestamp(),\n          updatedAt: serverTimestamp()\n        };\n\n        const id = quotation.id || this.generateId('quo');\n        await quotationsService.createWithId(id, quotationData);\n        \n        result.success++;\n        console.log(`✅ Migrated quotation: ${quotation.quotationNumber}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate quotation ${quotation.quotationNumber}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Migrate quotation templates\n  async migrateQuotationTemplates(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      collection: 'quotationTemplates',\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n\n    console.log('📄 Migrating quotation templates...');\n\n    for (const template of quotationTemplatesData) {\n      try {\n        const templateData = {\n          ...template,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          isDefault: true // Mark as default template\n        };\n\n        const id = template.id || this.generateId('template');\n        await quotationTemplatesService.createWithId(id, templateData);\n        \n        result.success++;\n        console.log(`✅ Migrated template: ${template.name}`);\n      } catch (error) {\n        result.failed++;\n        const errorMsg = `Failed to migrate template ${template.name}: ${error}`;\n        result.errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Run complete migration\n  async runMigration(): Promise<MigrationSummary> {\n    console.log('🚀 Starting Firestore migration...');\n    console.log('⚠️  Make sure you have updated your Firestore security rules!');\n    \n    this.summary.startTime = new Date();\n\n    try {\n      // Run all migrations\n      const migrations = [\n        { name: 'Departments', fn: () => this.migrateDepartments() },\n        { name: 'Employee Roles', fn: () => this.migrateEmployeeRoles() },\n        { name: 'Lead Sources', fn: () => this.migrateLeadSources() },\n        { name: 'Products', fn: () => this.migrateProducts() },\n        { name: 'Employees', fn: () => this.migrateEmployees() },\n        { name: 'Quotation Templates', fn: () => this.migrateQuotationTemplates() },\n        { name: 'Leads', fn: () => this.migrateLeads() },\n        { name: 'Quotations', fn: () => this.migrateQuotations() }\n      ];\n\n      for (const migration of migrations) {\n        console.log(`\\n📊 Starting ${migration.name} migration...`);\n        const result = await migration.fn();\n        this.results.push(result);\n        \n        this.summary.totalDocuments += result.success + result.failed;\n        this.summary.successfulDocuments += result.success;\n        this.summary.failedDocuments += result.failed;\n        \n        console.log(`✅ ${migration.name}: ${result.success} success, ${result.failed} failed`);\n      }\n\n      this.summary.totalCollections = migrations.length;\n      this.summary.results = this.results;\n      this.summary.endTime = new Date();\n      this.summary.duration = this.summary.endTime.getTime() - this.summary.startTime.getTime();\n\n      // Print summary\n      console.log('\\n🎉 Migration completed!');\n      console.log('📊 Summary:');\n      console.log(`   Collections: ${this.summary.totalCollections}`);\n      console.log(`   Total Documents: ${this.summary.totalDocuments}`);\n      console.log(`   Successful: ${this.summary.successfulDocuments}`);\n      console.log(`   Failed: ${this.summary.failedDocuments}`);\n      console.log(`   Duration: ${(this.summary.duration / 1000).toFixed(2)}s`);\n\n      if (this.summary.failedDocuments > 0) {\n        console.log('\\n❌ Errors encountered:');\n        this.results.forEach(result => {\n          if (result.errors.length > 0) {\n            console.log(`\\n${result.collection}:`);\n            result.errors.forEach(error => console.log(`  - ${error}`));\n          }\n        });\n      }\n\n    } catch (error) {\n      console.error('💥 Migration failed:', error);\n      throw error;\n    }\n\n    return this.summary;\n  }\n\n  // Verify migration by checking document counts\n  async verifyMigration(): Promise<void> {\n    console.log('\\n🔍 Verifying migration...');\n\n    const verifications = [\n      { name: 'Employees', service: employeesService, expected: employeesData.length },\n      { name: 'Departments', service: departmentsService, expected: departmentsData.length },\n      { name: 'Employee Roles', service: employeeRolesService, expected: employeeRolesData.length },\n      { name: 'Lead Sources', service: leadSourcesService, expected: leadSourcesData.length },\n      { name: 'Products', service: productsService, expected: productsData.length },\n      { name: 'Leads', service: leadsService, expected: leadsData.length },\n      { name: 'Quotations', service: quotationsService, expected: quotationsData.length },\n      { name: 'Quotation Templates', service: quotationTemplatesService, expected: quotationTemplatesData.length }\n    ];\n\n    for (const verification of verifications) {\n      try {\n        const documents = await verification.service.getAll();\n        const actual = documents.length;\n        const status = actual === verification.expected ? '✅' : '❌';\n        \n        console.log(`${status} ${verification.name}: ${actual}/${verification.expected}`);\n        \n        if (actual !== verification.expected) {\n          console.warn(`   Expected ${verification.expected} but found ${actual}`);\n        }\n      } catch (error) {\n        console.error(`❌ Failed to verify ${verification.name}:`, error);\n      }\n    }\n  }\n\n  // Clear all migrated data (use with caution!)\n  async clearAllData(): Promise<void> {\n    console.log('🗑️  Clearing all migrated data...');\n    console.warn('⚠️  This will delete ALL data from Firestore!');\n\n    const services = [\n      employeesService,\n      departmentsService,\n      employeeRolesService,\n      leadSourcesService,\n      productsService,\n      leadsService,\n      quotationsService,\n      quotationTemplatesService\n    ];\n\n    for (const service of services) {\n      try {\n        const documents = await service.getAll();\n        const ids = documents.map(doc => doc.id!);\n        \n        if (ids.length > 0) {\n          await service.deleteMultiple(ids);\n          console.log(`✅ Cleared ${ids.length} documents from ${service['collectionName']}`);\n        }\n      } catch (error) {\n        console.error(`❌ Failed to clear ${service['collectionName']}:`, error);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const firestoreMigration = new FirestoreMigration();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1441, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/firestore-migration.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { firestoreMigration } from '../lib/migrate-to-firestore';\n\ninterface MigrationResult {\n  collection: string;\n  success: number;\n  failed: number;\n  errors: string[];\n}\n\ninterface MigrationSummary {\n  totalCollections: number;\n  totalDocuments: number;\n  successfulDocuments: number;\n  failedDocuments: number;\n  results: MigrationResult[];\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n}\n\nexport default function FirestoreMigration() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isClearing, setIsClearing] = useState(false);\n  const [summary, setSummary] = useState<MigrationSummary | null>(null);\n  const [logs, setLogs] = useState<string[]>([]);\n  const [showLogs, setShowLogs] = useState(false);\n\n  const addLog = (message: string) => {\n    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);\n  };\n\n  const runMigration = async () => {\n    setIsRunning(true);\n    setLogs([]);\n    setSummary(null);\n    \n    try {\n      addLog('🚀 Starting migration...');\n      \n      // Override console.log to capture logs\n      const originalLog = console.log;\n      const originalError = console.error;\n      const originalWarn = console.warn;\n      \n      console.log = (...args) => {\n        addLog(args.join(' '));\n        originalLog(...args);\n      };\n      \n      console.error = (...args) => {\n        addLog(`ERROR: ${args.join(' ')}`);\n        originalError(...args);\n      };\n      \n      console.warn = (...args) => {\n        addLog(`WARN: ${args.join(' ')}`);\n        originalWarn(...args);\n      };\n\n      const result = await firestoreMigration.runMigration();\n      setSummary(result);\n      \n      // Restore console methods\n      console.log = originalLog;\n      console.error = originalError;\n      console.warn = originalWarn;\n      \n      addLog('✅ Migration completed successfully!');\n    } catch (error) {\n      addLog(`❌ Migration failed: ${error}`);\n      console.error('Migration error:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const verifyMigration = async () => {\n    setIsVerifying(true);\n    \n    try {\n      addLog('🔍 Starting verification...');\n      await firestoreMigration.verifyMigration();\n      addLog('✅ Verification completed!');\n    } catch (error) {\n      addLog(`❌ Verification failed: ${error}`);\n      console.error('Verification error:', error);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const clearAllData = async () => {\n    if (!confirm('⚠️ This will delete ALL migrated data from Firestore. Are you sure?')) {\n      return;\n    }\n    \n    if (!confirm('🚨 FINAL WARNING: This action cannot be undone. Continue?')) {\n      return;\n    }\n    \n    setIsClearing(true);\n    \n    try {\n      addLog('🗑️ Starting data cleanup...');\n      await firestoreMigration.clearAllData();\n      addLog('✅ Data cleanup completed!');\n      setSummary(null);\n    } catch (error) {\n      addLog(`❌ Data cleanup failed: ${error}`);\n      console.error('Cleanup error:', error);\n    } finally {\n      setIsClearing(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-white\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">🔥 Firestore Data Migration</h1>\n      \n      {/* Status Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-blue-800\">📊 Data Sources</h3>\n          <ul className=\"text-sm text-blue-600 mt-2\">\n            <li>• Employees</li>\n            <li>• Departments</li>\n            <li>• Employee Roles</li>\n            <li>• Lead Sources</li>\n            <li>• Products</li>\n            <li>• Leads</li>\n            <li>• Quotations</li>\n            <li>• Quotation Templates</li>\n          </ul>\n        </div>\n        \n        <div className=\"bg-green-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-green-800\">🎯 Target Collections</h3>\n          <ul className=\"text-sm text-green-600 mt-2\">\n            <li>• employees</li>\n            <li>• departments</li>\n            <li>• employeeRoles</li>\n            <li>• leadSources</li>\n            <li>• products</li>\n            <li>• leads</li>\n            <li>• quotations</li>\n            <li>• quotationTemplates</li>\n          </ul>\n        </div>\n        \n        <div className=\"bg-yellow-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-yellow-800\">⚠️ Prerequisites</h3>\n          <ul className=\"text-sm text-yellow-600 mt-2\">\n            <li>• Firestore security rules updated</li>\n            <li>• Authentication enabled</li>\n            <li>• Network connection stable</li>\n            <li>• Backup existing data</li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex flex-wrap gap-4 mb-6\">\n        <button\n          onClick={runMigration}\n          disabled={isRunning}\n          className=\"bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n        >\n          {isRunning ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n              Running Migration...\n            </>\n          ) : (\n            '🚀 Start Migration'\n          )}\n        </button>\n        \n        <button\n          onClick={verifyMigration}\n          disabled={isVerifying || !summary}\n          className=\"bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n        >\n          {isVerifying ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n              Verifying...\n            </>\n          ) : (\n            '🔍 Verify Migration'\n          )}\n        </button>\n        \n        <button\n          onClick={clearAllData}\n          disabled={isClearing}\n          className=\"bg-red-500 text-white px-6 py-3 rounded-lg hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n        >\n          {isClearing ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n              Clearing...\n            </>\n          ) : (\n            '🗑️ Clear All Data'\n          )}\n        </button>\n        \n        <button\n          onClick={() => setShowLogs(!showLogs)}\n          className=\"bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600\"\n        >\n          {showLogs ? '📋 Hide Logs' : '📋 Show Logs'}\n        </button>\n      </div>\n\n      {/* Migration Summary */}\n      {summary && (\n        <div className=\"bg-gray-50 p-6 rounded-lg mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">📊 Migration Summary</h2>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{summary.totalCollections}</div>\n              <div className=\"text-sm text-gray-600\">Collections</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{summary.successfulDocuments}</div>\n              <div className=\"text-sm text-gray-600\">Successful</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{summary.failedDocuments}</div>\n              <div className=\"text-sm text-gray-600\">Failed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {summary.duration ? `${(summary.duration / 1000).toFixed(1)}s` : 'N/A'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Duration</div>\n            </div>\n          </div>\n\n          {/* Detailed Results */}\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">Collection Results:</h3>\n            {summary.results.map((result, index) => (\n              <div key={index} className=\"flex justify-between items-center p-2 bg-white rounded\">\n                <span className=\"font-medium\">{result.collection}</span>\n                <div className=\"flex space-x-4 text-sm\">\n                  <span className=\"text-green-600\">✅ {result.success}</span>\n                  <span className=\"text-red-600\">❌ {result.failed}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Errors */}\n          {summary.failedDocuments > 0 && (\n            <div className=\"mt-4\">\n              <h3 className=\"font-semibold text-red-600 mb-2\">❌ Errors:</h3>\n              <div className=\"bg-red-50 p-3 rounded max-h-40 overflow-y-auto\">\n                {summary.results.map((result, index) => \n                  result.errors.map((error, errorIndex) => (\n                    <div key={`${index}-${errorIndex}`} className=\"text-sm text-red-700 mb-1\">\n                      <strong>{result.collection}:</strong> {error}\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Logs */}\n      {showLogs && (\n        <div className=\"bg-black text-green-400 p-4 rounded-lg font-mono text-sm\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <h3 className=\"font-semibold\">📋 Migration Logs</h3>\n            <button\n              onClick={() => setLogs([])}\n              className=\"text-red-400 hover:text-red-300 text-xs\"\n            >\n              Clear Logs\n            </button>\n          </div>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {logs.length === 0 ? (\n              <div className=\"text-gray-500\">No logs yet...</div>\n            ) : (\n              logs.map((log, index) => (\n                <div key={index} className=\"mb-1\">\n                  {log}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"mt-8 bg-blue-50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-4\">📋 Migration Instructions</h3>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-semibold text-blue-800\">Before Migration:</h4>\n            <ol className=\"list-decimal list-inside text-sm text-blue-700 ml-4\">\n              <li>Update Firestore security rules to allow writes</li>\n              <li>Ensure you have a stable internet connection</li>\n              <li>Backup your existing Firestore data (if any)</li>\n              <li>Review the data sources and target collections</li>\n            </ol>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-blue-800\">During Migration:</h4>\n            <ul className=\"list-disc list-inside text-sm text-blue-700 ml-4\">\n              <li>Do not close the browser tab</li>\n              <li>Monitor the logs for any errors</li>\n              <li>The process may take several minutes</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold text-blue-800\">After Migration:</h4>\n            <ul className=\"list-disc list-inside text-sm text-blue-700 ml-4\">\n              <li>Run verification to ensure data integrity</li>\n              <li>Update your application code to use Firestore services</li>\n              <li>Test all functionality thoroughly</li>\n              <li>Update security rules for production use</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Security Rules Reminder */}\n      <div className=\"mt-6 bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <span className=\"text-yellow-400\">⚠️</span>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-yellow-700\">\n              <strong>Security Rules Required:</strong> Make sure you have updated your Firestore security rules \n              to allow write operations. You can use the testing rules provided in the documentation, \n              but remember to update them for production use.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}