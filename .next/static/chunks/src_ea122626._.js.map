{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/columns.tsx"],"sourcesContent":["\n'use client';\n\nimport { ColumnDef } from '@tanstack/react-table';\nimport Link from 'next/link';\nimport { ArrowUpDown, MoreHorizontal, Edit, Eye, Trash2, FileText } from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport type { Quotation, QuotationStatus } from '@/lib/types';\nimport { format, parseISO } from 'date-fns';\n// import { EditQuotationDialog } from './edit-quotation-dialog';\n\ntype PopulatedQuotation = Quotation & { leadName: string; leadCompany: string };\n\nfunction FormattedDate({ dateString }: { dateString: string }) {\n    const [formattedDate, setFormattedDate] = useState('');\n  \n    useEffect(() => {\n        if (dateString) {\n            setFormattedDate(format(parseISO(dateString), 'PPP'));\n        }\n    }, [dateString]);\n  \n    if (!formattedDate) {\n      return <div className=\"pl-4\">-</div>;\n    }\n  \n    return <div className=\"pl-4\">{formattedDate}</div>;\n}\n\nconst formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(amount);\n};\n\nconst statusStyles: Record<QuotationStatus, string> = {\n    'Draft': 'bg-gray-100 text-gray-800 border-gray-200',\n    'Sent': 'bg-blue-100 text-blue-800 border-blue-200',\n    'Accepted': 'bg-green-100 text-green-800 border-green-200',\n    'Rejected': 'bg-red-100 text-red-800 border-red-200',\n  };\n\nfunction QuotationActions({ quotation }: { quotation: PopulatedQuotation }) {\n    // const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  \n    return (\n      <div className=\"text-right\">\n        {/* <EditQuotationDialog quotation={quotation} open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen} /> */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem asChild>\n              <Link href={`/quotations/${quotation.id}`}>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                View/Download\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuItem /* onSelect={() => setIsEditDialogOpen(true)} */>\n                <Edit className=\"mr-2 h-4 w-4\" />\n                Edit Quotation\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-destructive focus:bg-destructive/10 focus:text-destructive\">\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Delete Quotation\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    );\n}\n\nexport const columns: ColumnDef<PopulatedQuotation>[] = [\n  {\n    accessorKey: 'quotationNumber',\n    header: 'Number',\n    cell: ({ row }) => (\n        <Link href={`/quotations/${row.original.id}`} className=\"font-medium hover:underline\">\n            {row.original.quotationNumber}\n        </Link>\n    ),\n  },\n  {\n    accessorKey: 'leadName',\n    header: 'Lead',\n    cell: ({ row }) => (\n      <div>\n        <div className=\"font-medium\">{row.original.leadName}</div>\n        <div className=\"text-xs text-muted-foreground\">{row.original.leadCompany}</div>\n      </div>\n    ),\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: ({ row }) => <Badge variant=\"outline\" className={statusStyles[row.original.status]}>{row.original.status}</Badge>,\n  },\n  {\n    accessorKey: 'date',\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n        >\n          Date\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => <FormattedDate dateString={row.original.date} />,\n  },\n  {\n    accessorKey: 'grandTotal',\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => <div className=\"text-right font-medium\">{formatCurrency(row.original.grandTotal)}</div>,\n  },\n  {\n    id: 'actions',\n    cell: ({ row }) => <QuotationActions quotation={row.original} />,\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 526, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 787, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1002, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,sKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,sKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC,sKAAA,CAAA,SAAuB;kBACtB,cAAA,6LAAC,sKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,sKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1050, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/calendar.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"],"names":[],"mappings":";;;;AAIA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAWA,SAAS,SAAS,EAChB,SAAS,EACT,UAAU,EACV,kBAAkB,IAAI,EACtB,GAAG,OACW;IACd,qBACE,6LAAC,iKAAA,CAAA,YAAS;QACR,iBAAiB;QACjB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,OAAO;QACrB,YAAY;YACV,QAAQ;YACR,OAAO;YACP,SAAS;YACT,eAAe;YACf,KAAK;YACL,YAAY,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACX,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAU,IACpC;YAEF,qBAAqB;YACrB,iBAAiB;YACjB,OAAO;YACP,UAAU;YACV,WACE;YACF,KAAK;YACL,MAAM;YACN,KAAK,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACJ,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAQ,IAClC;YAEF,eAAe;YACf,cACE;YACF,WAAW;YACX,aACE;YACF,cAAc;YACd,kBACE;YACF,YAAY;YACZ,GAAG,UAAU;QACf;QACA,YAAY;YACV,UAAU,CAAC,EAAE,GAAG,OAAO,iBAAK,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;YACnD,WAAW,CAAC,EAAE,GAAG,OAAO,iBAAK,6LAAC,yNAAA,CAAA,eAAY;oBAAC,WAAU;;;;;;QACvD;QACC,GAAG,KAAK;;;;;;AAGf;KAnDS;AAoDT,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1134, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/types.ts"],"sourcesContent":["\nexport type LeadStatus = 'New' | 'In Discussion' | 'Negotiation' | 'Closed - Won' | 'Closed - Lost';\n\nexport const ALL_STATUSES: LeadStatus[] = ['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost'];\n\nexport type ActivityType = 'Meeting' | 'Call' | 'Email' | 'Revision Request' | 'Proposal Sent';\n\nexport type LeadSource = {\n  id: string;\n  name: string;\n};\n\nexport type Activity = {\n  id: string;\n  date: string; // ISO 8601 format\n  type: ActivityType;\n  notes: string;\n  summary?: string;\n};\n\nexport type Product = {\n  id: string;\n  name:string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n};\n\nexport type NewProduct = Omit<Product, 'id'>;\n\nexport type LeadProduct = {\n  productId: string;\n  quantity: number;\n  rate: number;\n  selectedSku?: string;\n};\n\nexport type PopulatedLeadProduct = LeadProduct & {\n  product: Product;\n  amount: number;\n};\n\nexport type Lead = {\n  id: string;\n  name: string;\n  company: string;\n  email: string;\n  phone: string;\n  whatsappNumber?: string;\n  status: LeadStatus;\n  source: string;\n  createdAt: string; // ISO 8601 format\n  activities: Activity[];\n  products: LeadProduct[];\n};\n\nexport type UpdatableLeadData = Omit<Lead, 'id' | 'createdAt' | 'activities'>;\n\nexport type QuotationStatus = 'Draft' | 'Sent' | 'Accepted' | 'Rejected';\nexport const ALL_QUOTATION_STATUSES: QuotationStatus[] = ['Draft', 'Sent', 'Accepted', 'Rejected'];\n\nexport type QuotationProduct = {\n  productId: string;\n  quantity: number;\n  rate: number;\n  gstRate: number;\n};\n\nexport type PopulatedQuotationProduct = QuotationProduct & {\n    product: Product;\n    amount: number;\n    gstAmount: number;\n};\n\nexport type Quotation = {\n  id: string;\n  quotationNumber: string;\n  leadId: string;\n  date: string;\n  validUntil: string;\n  products: QuotationProduct[];\n  subTotal: number;\n  totalGst: number;\n  grandTotal: number;\n  status: QuotationStatus;\n  templateId: string;\n  createdAt: string;\n  // Template fields that can be overridden\n  logoUrl?: string;\n  companyName: string;\n  companyAddress: string;\n  companyGst: string;\n  termsAndConditions: string;\n};\n\nexport type QuotationTemplate = {\n    id: string;\n    name: string;\n    logoUrl?: string;\n    companyName: string;\n    companyAddress: string;\n    companyGst: string;\n    termsAndConditions: string;\n};\n\nexport type NewQuotationTemplate = Omit<QuotationTemplate, 'id'>;\n\nexport type EmployeeRoleData = {\n    id: string;\n    name: string;\n};\n\nexport type EmployeeRole = EmployeeRoleData['name'];\n\nexport type Department = {\n    id: string;\n    name: string;\n};\n\nexport type Employee = {\n    id: string;\n    name: string;\n    email: string;\n    phone: string;\n    role: EmployeeRole;\n    department: string;\n    address: string;\n    createdAt: string;\n};\n\nexport type NewEmployee = Omit<Employee, 'id' | 'createdAt'>;\n"],"names":[],"mappings":";;;;AAGO,MAAM,eAA6B;IAAC;IAAO;IAAiB;IAAe;IAAgB;CAAgB;AA0D3G,MAAM,yBAA4C;IAAC;IAAS;IAAQ;IAAY;CAAW","debugId":null}},
    {"offset": {"line": 1160, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["// Firestore-based data service - replaces JSON file operations\n// Original JSON-based service backed up as index-json-backup.ts\n\nexport * from '../firestore-data-service';\n"],"names":[],"mappings":"AAAA,+DAA+D;AAC/D,gEAAgE","debugId":null}},
    {"offset": {"line": 1181, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAiHa,WAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1197, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA6Oa,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1213, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA2Ua,wBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1229, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA6Ia,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1245, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IA0XsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1299, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/create-quotation-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useForm, useFieldArray, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { PlusCircle, Trash2, CalendarIcon, FilePlus } from 'lucide-react';\nimport { format } from 'date-fns';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from '@/components/ui/select';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n    TableFooter as UiTableFooter,\n  } from '@/components/ui/table';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport { useToast } from '@/hooks/use-toast';\nimport { Lead, Product, QuotationTemplate, ALL_QUOTATION_STATUSES } from '@/lib/types';\nimport { getLeads, getProducts, getQuotationTemplates, getLeadById } from '@/lib/data';\nimport { addQuotation } from '@/lib/actions';\nimport { cn } from '@/lib/utils';\nimport { Separator } from '@/components/ui/separator';\n\nconst quotationProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1, 'Quantity must be at least 1'),\n    rate: z.coerce.number().min(0, 'Rate must be a positive number'),\n    gstRate: z.coerce.number().min(0),\n});\n\nconst quotationSchema = z.object({\n  leadId: z.string().min(1, 'A lead must be selected'),\n  templateId: z.string().min(1, 'A template must be selected'),\n  date: z.date(),\n  validUntil: z.date(),\n  status: z.enum(ALL_QUOTATION_STATUSES),\n  products: z.array(quotationProductSchema).min(1, 'At least one product is required'),\n  // Overridable template fields\n  companyName: z.string().min(1, 'Company name is required.'),\n  companyAddress: z.string().min(1, 'Company address is required.'),\n  companyGst: z.string().min(1, 'Company GSTIN is required.'),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\ntype QuotationFormData = z.infer<typeof quotationSchema>;\n\nconst formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(amount);\n};\n\nexport function CreateQuotationDialog({ leadId: initialLeadId }: { leadId?: string }) {\n  const [open, setOpen] = useState(false);\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);\n  const [templates, setTemplates] = useState<QuotationTemplate[]>([]);\n  const { toast } = useToast();\n\n  const { register, handleSubmit, reset, control, setValue, watch, formState: { errors, isSubmitting } } = useForm<QuotationFormData>({\n    resolver: zodResolver(quotationSchema),\n    defaultValues: {\n      leadId: initialLeadId || undefined,\n      date: new Date(),\n      validUntil: new Date(new Date().setDate(new Date().getDate() + 15)), // Default validity: 15 days\n      status: 'Draft',\n      products: [],\n      companyName: '',\n      companyAddress: '',\n      companyGst: '',\n      termsAndConditions: '',\n      logoUrl: '',\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'products',\n  });\n\n  const watchedLeadId = watch('leadId');\n  const watchedTemplateId = watch('templateId');\n  const watchedProducts = watch('products');\n\n  const productTotals = watchedProducts?.map(p => {\n    const amount = p.quantity * p.rate;\n    const gstAmount = amount * (p.gstRate / 100);\n    return { amount, gstAmount, total: amount + gstAmount };\n  }) || [];\n  \n  const subTotal = productTotals.reduce((acc, curr) => acc + curr.amount, 0);\n  const totalGst = productTotals.reduce((acc, curr) => acc + curr.gstAmount, 0);\n  const grandTotal = subTotal + totalGst;\n\n  useEffect(() => {\n    async function fetchData() {\n        if (open) {\n            const [fetchedLeads, fetchedProducts, fetchedTemplates] = await Promise.all([\n                getLeads(),\n                getProducts(),\n                getQuotationTemplates(),\n            ]);\n            setLeads(fetchedLeads);\n            setAvailableProducts(fetchedProducts);\n            setTemplates(fetchedTemplates);\n        }\n    }\n    fetchData();\n  }, [open]);\n\n  useEffect(() => {\n    async function populateFromTemplate() {\n        if (watchedTemplateId) {\n            const template = templates.find(t => t.id === watchedTemplateId);\n            if (template) {\n                setValue('companyName', template.companyName);\n                setValue('companyAddress', template.companyAddress);\n                setValue('companyGst', template.companyGst);\n                setValue('termsAndConditions', template.termsAndConditions);\n                setValue('logoUrl', template.logoUrl || '');\n            }\n        }\n    }\n    if(open) {\n      populateFromTemplate();\n    }\n  }, [watchedTemplateId, open, templates, setValue]);\n\n  useEffect(() => {\n    async function populateProductsFromLead() {\n        if (watchedLeadId && availableProducts.length > 0) {\n            const lead = await getLeadById(watchedLeadId);\n            if (lead && lead.products && lead.products.length > 0) {\n                const quotationProducts = lead.products.map(lp => {\n                    const productDetails = availableProducts.find(ap => ap.id === lp.productId);\n                    return {\n                        productId: lp.productId,\n                        quantity: lp.quantity,\n                        rate: lp.rate,\n                        gstRate: productDetails?.gstRate || 0,\n                    };\n                });\n                setValue('products', quotationProducts, { shouldValidate: true });\n            } else {\n                setValue('products', [], { shouldValidate: true });\n            }\n        }\n    }\n    if (open) {\n        populateProductsFromLead();\n    }\n  }, [watchedLeadId, open, availableProducts, setValue]);\n\n\n  const onSubmit = async (data: QuotationFormData) => {\n    const formData = new FormData();\n    const payload = {\n        ...data,\n        date: format(data.date, 'yyyy-MM-dd'),\n        validUntil: format(data.validUntil, 'yyyy-MM-dd'),\n        subTotal,\n        totalGst,\n        grandTotal,\n    };\n    \n    Object.entries(payload).forEach(([key, value]) => {\n        if (key === 'products') {\n            formData.append(key, JSON.stringify(value));\n        } else if (value) {\n            formData.append(key, String(value));\n        }\n    });\n\n    const result = await addQuotation(formData);\n\n    if (result.message === 'Successfully created quotation.') {\n      toast({\n        title: 'Quotation Created',\n        description: `A new quotation has been successfully created.`,\n      });\n      reset();\n      setOpen(false);\n    } else {\n        toast({\n            variant: 'destructive',\n            title: 'Error creating quotation',\n            description: result.message,\n        });\n    }\n  };\n\n  const handleProductChange = (productId: string, index: number) => {\n    const product = availableProducts.find(p => p.id === productId);\n    if (product) {\n      setValue(`products.${index}.rate`, product.price, { shouldValidate: true });\n      setValue(`products.${index}.gstRate`, product.gstRate, { shouldValidate: true });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(isOpen) => { setOpen(isOpen); if (!isOpen) reset(); }}>\n      <DialogTrigger asChild>\n        {initialLeadId ? (\n            <Button variant=\"outline\">\n                <FilePlus className=\"mr-2 h-4 w-4\" />\n                Create Quotation\n            </Button>\n        ) : (\n            <Button>\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                New Quotation\n            </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-5xl\">\n        <DialogHeader>\n          <DialogTitle>Create New Quotation</DialogTitle>\n          <DialogDescription>\n            Fill in the details to generate a new quotation.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid gap-6 py-4 max-h-[70vh] overflow-y-auto pr-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"leadId\">Lead</Label>\n                        <Controller\n                            control={control}\n                            name=\"leadId\"\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                    <SelectTrigger><SelectValue placeholder=\"Select a lead\" /></SelectTrigger>\n                                    <SelectContent>\n                                        {leads.map(lead => <SelectItem key={lead.id} value={lead.id}>{lead.name} - {lead.company}</SelectItem>)}\n                                    </SelectContent>\n                                </Select>\n                            )}\n                        />\n                        {errors.leadId && <p className=\"text-xs text-destructive mt-1\">{errors.leadId.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"templateId\">Quotation Template</Label>\n                        <Controller\n                            control={control}\n                            name=\"templateId\"\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                    <SelectTrigger><SelectValue placeholder=\"Select a template\" /></SelectTrigger>\n                                    <SelectContent>\n                                        {templates.map(template => <SelectItem key={template.id} value={template.id}>{template.name}</SelectItem>)}\n                                    </SelectContent>\n                                </Select>\n                            )}\n                        />\n                         {errors.templateId && <p className=\"text-xs text-destructive mt-1\">{errors.templateId.message}</p>}\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"date\">Quotation Date</Label>\n                        <Controller\n                            control={control}\n                            name=\"date\"\n                            render={({ field }) => (\n                                <Popover>\n                                    <PopoverTrigger asChild>\n                                        <Button variant={\"outline\"} className={cn(\"w-full justify-start text-left font-normal\", !field.value && \"text-muted-foreground\")}>\n                                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                            {field.value ? format(field.value, \"PPP\") : <span>Pick a date</span>}\n                                        </Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent className=\"w-auto p-0\">\n                                        <Calendar mode=\"single\" selected={field.value} onSelect={field.onChange} initialFocus />\n                                    </PopoverContent>\n                                </Popover>\n                            )}\n                        />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"validUntil\">Valid Until</Label>\n                        <Controller\n                            control={control}\n                            name=\"validUntil\"\n                            render={({ field }) => (\n                                <Popover>\n                                    <PopoverTrigger asChild>\n                                        <Button variant={\"outline\"} className={cn(\"w-full justify-start text-left font-normal\", !field.value && \"text-muted-foreground\")}>\n                                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                            {field.value ? format(field.value, \"PPP\") : <span>Pick a date</span>}\n                                        </Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent className=\"w-auto p-0\">\n                                        <Calendar mode=\"single\" selected={field.value} onSelect={field.onChange} />\n                                    </PopoverContent>\n                                </Popover>\n                            )}\n                        />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"status\">Status</Label>\n                        <Controller\n                            control={control}\n                            name=\"status\"\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                    <SelectTrigger><SelectValue placeholder=\"Set status\" /></SelectTrigger>\n                                    <SelectContent>\n                                        {ALL_QUOTATION_STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}\n                                    </SelectContent>\n                                </Select>\n                            )}\n                        />\n                    </div>\n                </div>\n                \n                <Separator />\n                <h3 className=\"text-lg font-medium\">Company & Terms</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyName\">Company Name</Label>\n                        <Input id=\"companyName\" {...register('companyName')} />\n                        {errors.companyName && <p className=\"text-xs text-destructive mt-1\">{errors.companyName.message}</p>}\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"companyGst\">Company GSTIN</Label>\n                        <Input id=\"companyGst\" {...register('companyGst')} />\n                        {errors.companyGst && <p className=\"text-xs text-destructive mt-1\">{errors.companyGst.message}</p>}\n                    </div>\n                </div>\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyAddress\">Company Address</Label>\n                    <Textarea id=\"companyAddress\" {...register('companyAddress')} />\n                    {errors.companyAddress && <p className=\"text-xs text-destructive mt-1\">{errors.companyAddress.message}</p>}\n                </div>\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"termsAndConditions\">Terms & Conditions</Label>\n                    <Textarea id=\"termsAndConditions\" {...register('termsAndConditions')} rows={5} />\n                </div>\n                <Separator />\n                \n                <div className=\"space-y-2\">\n                    <Label>Products</Label>\n                    <div className=\"border rounded-lg\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-[30%]\">Product Name</TableHead>\n                                    <TableHead>Qty</TableHead>\n                                    <TableHead>Rate</TableHead>\n                                    <TableHead>GST</TableHead>\n                                    <TableHead className=\"text-right\">Amount</TableHead>\n                                    <TableHead className=\"w-[50px]\"></TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {fields.map((field, index) => {\n                                    const { total } = productTotals[index] || { total: 0 };\n                                    return (\n                                    <TableRow key={field.id}>\n                                        <TableCell>\n                                            <Controller\n                                                control={control}\n                                                name={`products.${index}.productId`}\n                                                render={({ field }) => (\n                                                    <Select onValueChange={(value) => { field.onChange(value); handleProductChange(value, index); }} value={field.value}>\n                                                        <SelectTrigger><SelectValue placeholder=\"Select product\" /></SelectTrigger>\n                                                        <SelectContent>\n                                                            {availableProducts.map(p => <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>)}\n                                                        </SelectContent>\n                                                    </Select>\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell><Input type=\"number\" {...register(`products.${index}.quantity`)} min=\"1\" className=\"w-20\" /></TableCell>\n                                        <TableCell><Input type=\"number\" {...register(`products.${index}.rate`)} min=\"0\" className=\"w-24\" /></TableCell>\n                                        <TableCell>{watchedProducts?.[index]?.gstRate || 0}%</TableCell>\n                                        <TableCell className=\"text-right font-medium\">{formatCurrency(total)}</TableCell>\n                                        <TableCell>\n                                            <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => remove(index)}>\n                                                <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                )})}\n                                {fields.length === 0 && (\n                                    <TableRow><TableCell colSpan={6} className=\"text-center h-24\">No products added.</TableCell></TableRow>\n                                )}\n                            </TableBody>\n                            <UiTableFooter>\n                                <TableRow><TableCell colSpan={4} className=\"text-right\">Sub-total</TableCell><TableCell className=\"text-right\">{formatCurrency(subTotal)}</TableCell><TableCell></TableCell></TableRow>\n                                <TableRow><TableCell colSpan={4} className=\"text-right\">Total GST</TableCell><TableCell className=\"text-right\">{formatCurrency(totalGst)}</TableCell><TableCell></TableCell></TableRow>\n                                <TableRow><TableCell colSpan={4} className=\"text-right font-bold text-lg\">Grand Total</TableCell><TableCell className=\"text-right font-bold text-lg\">{formatCurrency(grandTotal)}</TableCell><TableCell></TableCell></TableRow>\n                            </UiTableFooter>\n                        </Table>\n                    </div>\n                     {errors.products && <p className=\"text-xs text-destructive mt-1\">{errors.products.message || errors.products.root?.message}</p>}\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => append({ productId: '', quantity: 1, rate: 0, gstRate: 0 })}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Product\n                    </Button>\n                </div>\n            </div>\n            <DialogFooter className=\"pt-4 border-t\">\n                <Button type=\"submit\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Creating...' : 'Create Quotation'}\n                </Button>\n            </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2607, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/data-table.tsx"],"sourcesContent":["\n'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  getFilteredRowModel,\n} from '@tanstack/react-table';\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\nimport { format } from 'date-fns';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Search, Download } from 'lucide-react';\nimport { CreateQuotationDialog } from './create-quotation-dialog';\nimport type { Quotation } from '@/lib/types';\n\ntype PopulatedQuotation = Quotation & { leadName: string; leadCompany: string };\n\ninterface DataTableProps<TData extends PopulatedQuotation, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData extends PopulatedQuotation, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [globalFilter, setGlobalFilter] = React.useState(searchParams.get('q') || '');\n  \n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onGlobalFilterChange: setGlobalFilter,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      globalFilter,\n    },\n  });\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setGlobalFilter(value);\n    const params = new URLSearchParams(searchParams);\n    if (value) {\n      params.set('q', value);\n    } else {\n      params.delete('q');\n    }\n    router.replace(`${pathname}?${params.toString()}`);\n  };\n\n  const handleExport = () => {\n    const headers = [\n      'Quotation Number', 'Lead Name', 'Lead Company', 'Status', 'Date', 'Valid Until',\n      'Sub-Total', 'Total GST', 'Grand Total', 'Created At'\n    ];\n\n    const escapeCsvCell = (cell: string | number) => {\n        const cellStr = String(cell);\n        if (cellStr.includes(',') || cellStr.includes('\"') || cellStr.includes('\\n')) {\n            return `\"${cellStr.replace(/\"/g, '\"\"')}\"`;\n        }\n        return cellStr;\n    };\n\n    const rows = table.getFilteredRowModel().rows.map(row => {\n        const q = row.original;\n        return [\n            q.quotationNumber,\n            q.leadName,\n            q.leadCompany,\n            q.status,\n            format(new Date(q.date), 'yyyy-MM-dd'),\n            format(new Date(q.validUntil), 'yyyy-MM-dd'),\n            q.subTotal,\n            q.totalGst,\n            q.grandTotal,\n            format(new Date(q.createdAt), 'yyyy-MM-dd HH:mm:ss'),\n        ].map(escapeCsvCell).join(',');\n    });\n\n    const csvContent = [headers.join(','), ...rows].join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'quotations.csv');\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div>\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 py-4\">\n            <div className=\"relative w-full sm:w-auto sm:max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                    placeholder=\"Search quotations...\"\n                    value={globalFilter}\n                    onChange={handleSearch}\n                    className=\"pl-10 w-full\"\n                />\n            </div>\n            <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n                <Button variant=\"outline\" onClick={handleExport} className=\"w-full sm:w-auto\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export\n                </Button>\n                <CreateQuotationDialog />\n            </div>\n        </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No quotations found.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}