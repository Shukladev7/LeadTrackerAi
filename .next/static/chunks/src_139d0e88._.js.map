{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["// Firestore-based data service - replaces JSON file operations\n// Original JSON-based service backed up as index-json-backup.ts\n\nexport * from '../firestore-data-service';\n"],"names":[],"mappings":"AAAA,+DAA+D;AAC/D,gEAAgE","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAkGa,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAwFa,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAyHa,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA2La,UAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA+Ha,WAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA0Pa,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAqQa,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAgQa,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA8Ra,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA6Ta,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAsWa,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAoSa,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAuTa,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAySa,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAyaa,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAyba,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IA8aa,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAmZa,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAmaa,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\nimport { Timestamp } from 'firebase/firestore';\n\n// Helper function to convert Firestore Timestamps to plain objects\nfunction convertTimestampToPlain(obj: any): any {\n  if (!obj) return obj;\n  \n  if (obj instanceof Timestamp) {\n    return obj.toDate().toISOString();\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => convertTimestampToPlain(item));\n  }\n  \n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        converted[key] = convertTimestampToPlain(obj[key]);\n      }\n    }\n    return converted;\n  }\n  \n  return obj;\n}\n\n// Helper function to convert Firestore documents to plain objects\nfunction convertFirestoreDocToPlain<T>(doc: T): T {\n  return convertTimestampToPlain(doc);\n}\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  const employees = await employeeService.getAll();\n  return employees.map(emp => convertFirestoreDocToPlain(emp));\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee ? convertFirestoreDocToPlain(employee) : undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return convertFirestoreDocToPlain(newEmployee);\n};\n\nexport const updateEmployee = async (id: string, employeeData: Partial<NewEmployee>): Promise<Employee> => {\n  await employeeService.update(id, employeeData);\n  const updatedEmployee = await employeeService.getById(id);\n  if (!updatedEmployee) {\n    throw new Error('Employee not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedEmployee);\n};\n\nexport const deleteEmployee = async (id: string): Promise<{ success: boolean }> => {\n  await employeeService.delete(id);\n  return { success: true };\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  // Convert to plain objects\n  leads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  const plainLead = convertFirestoreDocToPlain(lead);\n  return {\n    ...plainLead,\n    activities: plainLead.activities.sort((a: any, b: any) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const plainLeads = leads.map(lead => convertFirestoreDocToPlain(lead));\n  \n  const allActivities = plainLeads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return convertFirestoreDocToPlain(newLead);\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return convertFirestoreDocToPlain(newActivity);\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedLead);\n};\n\nexport const deleteLead = async (id: string): Promise<{ success: boolean }> => {\n  await leadService.delete(id);\n  return { success: true };\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const products = await productService.getAll();\n  return products.map(product => convertFirestoreDocToPlain(product));\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100,\n    minStockLevel: 10\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return convertFirestoreDocToPlain(newProduct);\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedProduct);\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  const sources = await leadSourcesService.getAll();\n  return sources.map(source => convertFirestoreDocToPlain(source));\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return convertFirestoreDocToPlain(newSource);\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  const plainQuotations = quotations.map(q => convertFirestoreDocToPlain(q));\n  \n  return plainQuotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation ? convertFirestoreDocToPlain(quotation) : undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return convertFirestoreDocToPlain(newQuotation);\n};\n\nexport const updateQuotation = async (id: string, quotationData: Partial<Quotation>): Promise<Quotation> => {\n  await quotationService.update(id, quotationData);\n  const updatedQuotation = await quotationService.getById(id);\n  if (!updatedQuotation) {\n    throw new Error('Quotation not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedQuotation);\n};\n\nexport const deleteQuotation = async (id: string): Promise<{ success: boolean }> => {\n  await quotationService.delete(id);\n  return { success: true };\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  const templates = await quotationTemplatesService.getAll();\n  return templates.map(template => convertFirestoreDocToPlain(template));\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template ? convertFirestoreDocToPlain(template) : undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return convertFirestoreDocToPlain(newTemplate);\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return convertFirestoreDocToPlain(updatedTemplate);\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  const roles = await employeeRolesService.getAll();\n  return roles.map(role => convertFirestoreDocToPlain(role));\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return convertFirestoreDocToPlain(newRole);\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  const departments = await departmentsService.getAll();\n  return departments.map(dept => convertFirestoreDocToPlain(dept));\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return convertFirestoreDocToPlain(newDepartment);\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAwZa,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/comprehensive-firestore-test.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  // Employee functions\n  addEmployee,\n  getEmployees,\n  deleteEmployee,\n  updateEmployee,\n  // Lead functions\n  addLead,\n  getLeads,\n  deleteLead,\n  updateLead,\n  // Product functions\n  addProduct,\n  getProducts,\n  deleteProduct,\n  updateProduct,\n  // Quotation functions\n  getQuotations,\n  deleteQuotation,\n  // Other functions\n  getLeadSources,\n  deleteLeadSource,\n  addLeadSource,\n  getDepartments,\n  deleteDepartment,\n  addDepartment,\n  getEmployeeRoles,\n  deleteEmployeeRole,\n  addEmployeeRole\n} from '../lib/data';\n\ntype DataType = 'employees' | 'leads' | 'products' | 'quotations' | 'departments' | 'roles' | 'sources';\n\nexport default function ComprehensiveFirestoreTest() {\n  const [activeTab, setActiveTab] = useState<DataType>('employees');\n  const [data, setData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const tabs = [\n    { id: 'employees' as DataType, label: '👥 Employees', color: 'blue' },\n    { id: 'leads' as DataType, label: '🎯 Leads', color: 'green' },\n    { id: 'products' as DataType, label: '📦 Products', color: 'purple' },\n    { id: 'quotations' as DataType, label: '📋 Quotations', color: 'orange' },\n    { id: 'departments' as DataType, label: '🏢 Departments', color: 'indigo' },\n    { id: 'roles' as DataType, label: '👔 Roles', color: 'pink' },\n    { id: 'sources' as DataType, label: '📊 Sources', color: 'teal' }\n  ];\n\n  const loadData = async (type: DataType) => {\n    try {\n      setLoading(true);\n      let result: any[] = [];\n      \n      switch (type) {\n        case 'employees':\n          result = await getEmployees();\n          break;\n        case 'leads':\n          result = await getLeads();\n          break;\n        case 'products':\n          result = await getProducts();\n          break;\n        case 'quotations':\n          result = await getQuotations();\n          break;\n        case 'departments':\n          result = await getDepartments();\n          break;\n        case 'roles':\n          result = await getEmployeeRoles();\n          break;\n        case 'sources':\n          result = await getLeadSources();\n          break;\n      }\n      \n      setData(result);\n      setMessage(`Loaded ${result.length} ${type} from Firestore`);\n    } catch (error) {\n      setMessage(`Error loading ${type}: ${error}`);\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async (item: any, type: DataType) => {\n    const itemName = item.name || item.quotationNumber || item.id;\n    if (!confirm(`Are you sure you want to delete \"${itemName}\"?`)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setMessage(`Deleting ${itemName} from Firestore...`);\n      \n      switch (type) {\n        case 'employees':\n          await deleteEmployee(item.id);\n          break;\n        case 'leads':\n          await deleteLead(item.id);\n          break;\n        case 'products':\n          await deleteProduct(item.id);\n          break;\n        case 'quotations':\n          await deleteQuotation(item.id);\n          break;\n        case 'departments':\n          await deleteDepartment(item.id);\n          break;\n        case 'roles':\n          await deleteEmployeeRole(item.id);\n          break;\n        case 'sources':\n          await deleteLeadSource(item.id);\n          break;\n      }\n      \n      setMessage(`✅ ${itemName} deleted successfully from Firestore!`);\n      await loadData(type);\n    } catch (error) {\n      setMessage(`❌ Error deleting ${itemName}: ${error}`);\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddSample = async (type: DataType) => {\n    try {\n      setLoading(true);\n      setMessage(`Adding sample ${type.slice(0, -1)} to Firestore...`);\n      \n      switch (type) {\n        case 'employees':\n          await addEmployee({\n            name: `Test Employee ${Date.now()}`,\n            email: `test${Date.now()}@example.com`,\n            phone: '1234567890',\n            role: 'Developer',\n            department: 'Engineering',\n            address: 'Test Address'\n          });\n          break;\n        case 'leads':\n          await addLead({\n            name: `Test Lead ${Date.now()}`,\n            company: 'Test Company',\n            email: `lead${Date.now()}@example.com`,\n            phone: '1234567890',\n            status: 'New',\n            source: 'Website',\n            products: [],\n            notes: 'Test lead created for testing'\n          });\n          break;\n        case 'products':\n          await addProduct({\n            name: `Test Product ${Date.now()}`,\n            description: 'A test product for demonstration',\n            price: 1000,\n            gstRate: 18\n          });\n          break;\n        case 'departments':\n          await addDepartment(`Test Department ${Date.now()}`);\n          break;\n        case 'roles':\n          await addEmployeeRole(`Test Role ${Date.now()}`);\n          break;\n        case 'sources':\n          await addLeadSource(`Test Source ${Date.now()}`);\n          break;\n      }\n      \n      setMessage(`✅ Sample ${type.slice(0, -1)} added successfully!`);\n      await loadData(type);\n    } catch (error) {\n      setMessage(`❌ Error adding sample ${type.slice(0, -1)}: ${error}`);\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData(activeTab);\n  }, [activeTab]);\n\n  const renderItem = (item: any, type: DataType) => {\n    const getItemTitle = () => {\n      switch (type) {\n        case 'employees':\n          return item.name;\n        case 'leads':\n          return `${item.name} (${item.company})`;\n        case 'products':\n          return item.name;\n        case 'quotations':\n          return item.quotationNumber;\n        case 'departments':\n        case 'roles':\n        case 'sources':\n          return item.name;\n        default:\n          return item.name || item.id;\n      }\n    };\n\n    const getItemDetails = () => {\n      switch (type) {\n        case 'employees':\n          return (\n            <div className=\"text-sm text-gray-600\">\n              <p>📧 {item.email}</p>\n              <p>📞 {item.phone}</p>\n              <p>👔 {item.role} - {item.department}</p>\n            </div>\n          );\n        case 'leads':\n          return (\n            <div className=\"text-sm text-gray-600\">\n              <p>📧 {item.email}</p>\n              <p>📞 {item.phone}</p>\n              <p>📊 Status: {item.status}</p>\n              <p>🔗 Source: {item.source}</p>\n            </div>\n          );\n        case 'products':\n          return (\n            <div className=\"text-sm text-gray-600\">\n              <p>💰 Price: ₹{item.price?.toLocaleString()}</p>\n              <p>📊 GST: {item.gstRate}%</p>\n              <p className=\"text-xs\">{item.description}</p>\n            </div>\n          );\n        case 'quotations':\n          return (\n            <div className=\"text-sm text-gray-600\">\n              <p>📅 Date: {item.date}</p>\n              <p>💵 Total: ₹{item.grandTotal?.toLocaleString()}</p>\n              <p>📊 Status: {item.status}</p>\n            </div>\n          );\n        default:\n          return (\n            <div className=\"text-sm text-gray-600\">\n              <p>ID: {item.id}</p>\n            </div>\n          );\n      }\n    };\n\n    return (\n      <div key={item.id} className=\"bg-white border rounded-lg p-4 shadow-sm\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-lg\">{getItemTitle()}</h3>\n            {getItemDetails()}\n            {item.createdAt && (\n              <p className=\"text-xs text-gray-400 mt-2\">\n                Created: {new Date(item.createdAt).toLocaleString()}\n              </p>\n            )}\n          </div>\n          <div className=\"flex flex-col space-y-1 ml-4\">\n            <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-xs text-center\">\n              Firestore\n            </span>\n            <button\n              onClick={() => handleDelete(item, type)}\n              disabled={loading}\n              className=\"bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600 disabled:opacity-50\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const currentTab = tabs.find(tab => tab.id === activeTab);\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 bg-white\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">🔥 Comprehensive Firestore Test</h1>\n      \n      {/* Status Message */}\n      <div className=\"mb-6 p-4 bg-gray-100 rounded-lg\">\n        <p className=\"text-sm\">\n          <strong>Status:</strong> {message || 'Ready to test Firestore operations'}\n        </p>\n        {loading && (\n          <div className=\"mt-2\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 inline-block\"></div>\n            <span className=\"ml-2 text-sm\">Loading...</span>\n          </div>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex flex-wrap gap-2 mb-6 border-b\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`px-4 py-2 rounded-t-lg font-medium transition-colors ${\n              activeTab === tab.id\n                ? `bg-${tab.color}-500 text-white border-b-2 border-${tab.color}-500`\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Content Area */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">\n            {currentTab?.label} ({data.length})\n          </h2>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => loadData(activeTab)}\n              disabled={loading}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50\"\n            >\n              Refresh\n            </button>\n            {['quotations'].indexOf(activeTab) === -1 && (\n              <button\n                onClick={() => handleAddSample(activeTab)}\n                disabled={loading}\n                className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50\"\n              >\n                Add Sample\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Data Grid */}\n        {data.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">\n            <p>No {activeTab} found in Firestore</p>\n            <p className=\"text-sm mt-2\">\n              {['quotations'].indexOf(activeTab) === -1 \n                ? 'Click \"Add Sample\" to create test data'\n                : 'Quotations need to be created through the leads workflow'\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {data.map(item => renderItem(item, activeTab))}\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-yellow-50 p-4 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-2\">🧪 Testing Instructions</h3>\n        <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n          <li>Click on different tabs to view different data types</li>\n          <li>Click \"Add Sample\" to create test data in Firestore</li>\n          <li>Click \"Delete\" on any item to remove it from Firestore</li>\n          <li>Click \"Refresh\" to reload data from Firestore</li>\n          <li>Check Firebase Console to see real-time changes</li>\n          <li>Test with multiple data types to verify all CRUD operations</li>\n        </ol>\n        \n        <div className=\"mt-4 p-3 bg-green-100 rounded\">\n          <p className=\"text-sm font-medium text-green-800\">✅ What This Tests:</p>\n          <ul className=\"text-xs text-green-700 mt-1 list-disc list-inside\">\n            <li>Create operations (Add Sample)</li>\n            <li>Read operations (Loading data)</li>\n            <li>Delete operations (Delete buttons)</li>\n            <li>Real-time data sync with Firestore</li>\n            <li>Error handling and user feedback</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;;;AAoCe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY;IACrD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAC1C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,OAAO;QACX;YAAE,IAAI;YAAyB,OAAO;YAAgB,OAAO;QAAO;QACpE;YAAE,IAAI;YAAqB,OAAO;YAAY,OAAO;QAAQ;QAC7D;YAAE,IAAI;YAAwB,OAAO;YAAe,OAAO;QAAS;QACpE;YAAE,IAAI;YAA0B,OAAO;YAAiB,OAAO;QAAS;QACxE;YAAE,IAAI;YAA2B,OAAO;YAAkB,OAAO;QAAS;QAC1E;YAAE,IAAI;YAAqB,OAAO;YAAY,OAAO;QAAO;QAC5D;YAAE,IAAI;YAAuB,OAAO;YAAc,OAAO;QAAO;KACjE;IAED,MAAM,WAAW,OAAO;QACtB,IAAI;YACF,WAAW;YACX,IAAI,SAAgB,EAAE;YAEtB,OAAQ;gBACN,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD;oBAC1B;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;oBACtB;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD;oBACzB;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,gBAAa,AAAD;oBAC3B;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,iBAAc,AAAD;oBAC5B;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,mBAAgB,AAAD;oBAC9B;gBACF,KAAK;oBACH,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,iBAAc,AAAD;oBAC5B;YACJ;YAEA,QAAQ;YACR,WAAW,CAAC,OAAO,EAAE,OAAO,MAAM,CAAC,CAAC,EAAE,KAAK,eAAe,CAAC;QAC7D,EAAE,OAAO,OAAO;YACd,WAAW,CAAC,cAAc,EAAE,KAAK,EAAE,EAAE,OAAO;YAC5C,QAAQ,KAAK,CAAC,UAAU;QAC1B,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,eAAe,OAAO,MAAW;QACrC,MAAM,WAAW,KAAK,IAAI,IAAI,KAAK,eAAe,IAAI,KAAK,EAAE;QAC7D,IAAI,CAAC,QAAQ,CAAC,iCAAiC,EAAE,SAAS,EAAE,CAAC,GAAG;YAC9D;QACF;QAEA,IAAI;YACF,WAAW;YACX,WAAW,CAAC,SAAS,EAAE,SAAS,kBAAkB,CAAC;YAEnD,OAAQ;gBACN,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,iBAAc,AAAD,EAAE,KAAK,EAAE;oBAC5B;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE,KAAK,EAAE;oBACxB;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,EAAE;oBAC3B;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD,EAAE,KAAK,EAAE;oBAC7B;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,EAAE;oBAC9B;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,qBAAkB,AAAD,EAAE,KAAK,EAAE;oBAChC;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,EAAE;oBAC9B;YACJ;YAEA,WAAW,CAAC,EAAE,EAAE,SAAS,qCAAqC,CAAC;YAC/D,MAAM,SAAS;QACjB,EAAE,OAAO,OAAO;YACd,WAAW,CAAC,iBAAiB,EAAE,SAAS,EAAE,EAAE,OAAO;YACnD,QAAQ,KAAK,CAAC,UAAU;QAC1B,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,kBAAkB,OAAO;QAC7B,IAAI;YACF,WAAW;YACX,WAAW,CAAC,cAAc,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;YAE/D,OAAQ;gBACN,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD,EAAE;wBAChB,MAAM,CAAC,cAAc,EAAE,KAAK,GAAG,IAAI;wBACnC,OAAO,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,YAAY,CAAC;wBACtC,OAAO;wBACP,MAAM;wBACN,YAAY;wBACZ,SAAS;oBACX;oBACA;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,UAAO,AAAD,EAAE;wBACZ,MAAM,CAAC,UAAU,EAAE,KAAK,GAAG,IAAI;wBAC/B,SAAS;wBACT,OAAO,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,YAAY,CAAC;wBACtC,OAAO;wBACP,QAAQ;wBACR,QAAQ;wBACR,UAAU,EAAE;wBACZ,OAAO;oBACT;oBACA;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EAAE;wBACf,MAAM,CAAC,aAAa,EAAE,KAAK,GAAG,IAAI;wBAClC,aAAa;wBACb,OAAO;wBACP,SAAS;oBACX;oBACA;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,gBAAa,AAAD,EAAE,CAAC,gBAAgB,EAAE,KAAK,GAAG,IAAI;oBACnD;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD,EAAE,CAAC,UAAU,EAAE,KAAK,GAAG,IAAI;oBAC/C;gBACF,KAAK;oBACH,MAAM,CAAA,GAAA,qJAAA,CAAA,gBAAa,AAAD,EAAE,CAAC,YAAY,EAAE,KAAK,GAAG,IAAI;oBAC/C;YACJ;YAEA,WAAW,CAAC,SAAS,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,oBAAoB,CAAC;YAC9D,MAAM,SAAS;QACjB,EAAE,OAAO,OAAO;YACd,WAAW,CAAC,sBAAsB,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,OAAO;YACjE,QAAQ,KAAK,CAAC,UAAU;QAC1B,SAAU;YACR,WAAW;QACb;IACF;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gDAAE;YACR,SAAS;QACX;+CAAG;QAAC;KAAU;IAEd,MAAM,aAAa,CAAC,MAAW;QAC7B,MAAM,eAAe;YACnB,OAAQ;gBACN,KAAK;oBACH,OAAO,KAAK,IAAI;gBAClB,KAAK;oBACH,OAAO,GAAG,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;gBACzC,KAAK;oBACH,OAAO,KAAK,IAAI;gBAClB,KAAK;oBACH,OAAO,KAAK,eAAe;gBAC7B,KAAK;gBACL,KAAK;gBACL,KAAK;oBACH,OAAO,KAAK,IAAI;gBAClB;oBACE,OAAO,KAAK,IAAI,IAAI,KAAK,EAAE;YAC/B;QACF;QAEA,MAAM,iBAAiB;YACrB,OAAQ;gBACN,KAAK;oBACH,qBACE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;oCAAE;oCAAI,KAAK,KAAK;;;;;;;0CACjB,6LAAC;;oCAAE;oCAAI,KAAK,KAAK;;;;;;;0CACjB,6LAAC;;oCAAE;oCAAI,KAAK,IAAI;oCAAC;oCAAI,KAAK,UAAU;;;;;;;;;;;;;gBAG1C,KAAK;oBACH,qBACE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;oCAAE;oCAAI,KAAK,KAAK;;;;;;;0CACjB,6LAAC;;oCAAE;oCAAI,KAAK,KAAK;;;;;;;0CACjB,6LAAC;;oCAAE;oCAAY,KAAK,MAAM;;;;;;;0CAC1B,6LAAC;;oCAAE;oCAAY,KAAK,MAAM;;;;;;;;;;;;;gBAGhC,KAAK;oBACH,qBACE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;oCAAE;oCAAY,KAAK,KAAK,EAAE;;;;;;;0CAC3B,6LAAC;;oCAAE;oCAAS,KAAK,OAAO;oCAAC;;;;;;;0CACzB,6LAAC;gCAAE,WAAU;0CAAW,KAAK,WAAW;;;;;;;;;;;;gBAG9C,KAAK;oBACH,qBACE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;oCAAE;oCAAU,KAAK,IAAI;;;;;;;0CACtB,6LAAC;;oCAAE;oCAAY,KAAK,UAAU,EAAE;;;;;;;0CAChC,6LAAC;;oCAAE;oCAAY,KAAK,MAAM;;;;;;;;;;;;;gBAGhC;oBACE,qBACE,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;;gCAAE;gCAAK,KAAK,EAAE;;;;;;;;;;;;YAGvB;QACF;QAEA,qBACE,6LAAC;YAAkB,WAAU;sBAC3B,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAyB;;;;;;4BACtC;4BACA,KAAK,SAAS,kBACb,6LAAC;gCAAE,WAAU;;oCAA6B;oCAC9B,IAAI,KAAK,KAAK,SAAS,EAAE,cAAc;;;;;;;;;;;;;kCAIvD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAU;0CAAoE;;;;;;0CAGpF,6LAAC;gCACC,SAAS,IAAM,aAAa,MAAM;gCAClC,UAAU;gCACV,WAAU;0CACX;;;;;;;;;;;;;;;;;;WAnBG,KAAK,EAAE;;;;;IA0BrB;IAEA,MAAM,aAAa,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;IAE/C,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAsC;;;;;;0BAGpD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAE,WAAU;;0CACX,6LAAC;0CAAO;;;;;;4BAAgB;4BAAE,WAAW;;;;;;;oBAEtC,yBACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;;;;;0CACf,6LAAC;gCAAK,WAAU;0CAAe;;;;;;;;;;;;;;;;;;0BAMrC,6LAAC;gBAAI,WAAU;0BACZ,KAAK,GAAG,CAAC,CAAA,oBACR,6LAAC;wBAEC,SAAS,IAAM,aAAa,IAAI,EAAE;wBAClC,WAAW,CAAC,qDAAqD,EAC/D,cAAc,IAAI,EAAE,GAChB,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,kCAAkC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,GACnE,+CACJ;kCAED,IAAI,KAAK;uBARL,IAAI,EAAE;;;;;;;;;;0BAcjB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;oCACX,YAAY;oCAAM;oCAAG,KAAK,MAAM;oCAAC;;;;;;;0CAEpC,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCACC,SAAS,IAAM,SAAS;wCACxB,UAAU;wCACV,WAAU;kDACX;;;;;;oCAGA;wCAAC;qCAAa,CAAC,OAAO,CAAC,eAAe,CAAC,mBACtC,6LAAC;wCACC,SAAS,IAAM,gBAAgB;wCAC/B,UAAU;wCACV,WAAU;kDACX;;;;;;;;;;;;;;;;;;oBAQN,KAAK,MAAM,KAAK,kBACf,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;oCAAE;oCAAI;oCAAU;;;;;;;0CACjB,6LAAC;gCAAE,WAAU;0CACV;oCAAC;iCAAa,CAAC,OAAO,CAAC,eAAe,CAAC,IACpC,2CACA;;;;;;;;;;;6CAKR,6LAAC;wBAAI,WAAU;kCACZ,KAAK,GAAG,CAAC,CAAA,OAAQ,WAAW,MAAM;;;;;;;;;;;;0BAMzC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,6LAAC;wBAAG,WAAU;;0CACZ,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAG;;;;;;0CACJ,6LAAC;0CAAG;;;;;;;;;;;;kCAGN,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAE,WAAU;0CAAqC;;;;;;0CAClD,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMhB;GAtWwB;KAAA","debugId":null}}]
}