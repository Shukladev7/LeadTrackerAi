{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["// Firestore-based data service - replaces JSON file operations\n// Original JSON-based service backed up as index-json-backup.ts\n\nexport * from '../firestore-data-service';\n"],"names":[],"mappings":"AAAA,+DAA+D;AAC/D,gEAAgE","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  return await employeeService.getAll();\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee || undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return newEmployee;\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  return {\n    ...lead,\n    activities: lead.activities.sort((a, b) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const allActivities = leads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return newLead;\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return newActivity;\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return updatedLead;\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return updatedLead;\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  return await productService.getAll();\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100, // Default stock\n    minStockLevel: 10   // Default minimum stock\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return newProduct;\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return updatedProduct;\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  return await leadSourcesService.getAll();\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return newSource;\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  return quotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation || undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return newQuotation;\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  return await quotationTemplatesService.getAll();\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template || undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return newTemplate;\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return updatedTemplate;\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  return await employeeRolesService.getAll();\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return newRole;\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  return await departmentsService.getAll();\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return newDepartment;\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAkEa,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/firestore-data-service.ts"],"sourcesContent":["'use server';\n\nimport { \n  employeeService, \n  leadService, \n  productService, \n  quotationService,\n  departmentsService,\n  employeeRolesService,\n  leadSourcesService,\n  quotationTemplatesService\n} from './business-services';\nimport { \n  Employee, \n  Lead, \n  Product, \n  Quotation, \n  QuotationTemplate,\n  Department,\n  EmployeeRole,\n  LeadSource,\n  LeadActivity\n} from './business-types';\n\n// Type definitions to match your existing types\nexport interface Activity extends LeadActivity {}\n\nexport interface NewEmployee {\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  department: string;\n  address: string;\n}\n\nexport interface NewProduct {\n  name: string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n}\n\nexport interface UpdatableLeadData {\n  name?: string;\n  company?: string;\n  email?: string;\n  phone?: string;\n  whatsappNumber?: string;\n  status?: Lead['status'];\n  source?: string;\n  products?: Lead['products'];\n}\n\n// Employee functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n  return await employeeService.getAll();\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n  const employee = await employeeService.getById(id);\n  return employee || undefined;\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n  const id = await employeeService.create({\n    ...employeeData,\n    isActive: true\n  });\n  \n  const newEmployee = await employeeService.getById(id);\n  if (!newEmployee) {\n    throw new Error('Failed to create employee');\n  }\n  \n  return newEmployee;\n};\n\n// Lead functions\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads: Lead[] = [];\n  \n  if (status) {\n    leads = await leadService.getLeadsByStatus(status as Lead['status']);\n  } else {\n    leads = await leadService.getAll();\n  }\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n  \n  return leads.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n  const lead = await leadService.getById(id);\n  if (!lead) return undefined;\n  \n  return {\n    ...lead,\n    activities: lead.activities.sort((a, b) => {\n      const aDate = new Date(a.date.toString()).getTime();\n      const bDate = new Date(b.date.toString()).getTime();\n      return bDate - aDate;\n    })\n  };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n  const leads = await leadService.getAll();\n  const allActivities = leads.flatMap(lead => \n    lead.activities.map(activity => ({ lead, activity }))\n  );\n  \n  return allActivities\n    .sort((a, b) => {\n      const aDate = new Date(a.activity.date.toString()).getTime();\n      const bDate = new Date(b.activity.date.toString()).getTime();\n      return bDate - aDate;\n    })\n    .slice(0, limit);\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const { notes, ...restOfLeadData } = leadData;\n  \n  const initialActivity: LeadActivity[] = [];\n  if (notes) {\n    initialActivity.push({\n      id: `act-${Date.now()}-1`,\n      date: new Date().toISOString(),\n      type: 'Email',\n      notes: `Lead created in the system. Initial notes: ${notes}`,\n    });\n  }\n\n  const id = await leadService.create({\n    ...restOfLeadData,\n    activities: initialActivity,\n    priority: 'Medium',\n    estimatedValue: leadData.products?.reduce((sum, product) => \n      sum + (product.quantity * product.rate), 0) || 0\n  });\n  \n  const newLead = await leadService.getById(id);\n  if (!newLead) {\n    throw new Error('Failed to create lead');\n  }\n  \n  return newLead;\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const lead = await leadService.getById(leadId);\n  if (!lead) {\n    throw new Error('Lead not found');\n  }\n\n  const newActivity: LeadActivity = {\n    ...activityData,\n    id: `act-${leadId}-${Date.now()}`,\n    date: new Date().toISOString(),\n  };\n  \n  await leadService.addActivity(leadId, newActivity);\n  return newActivity;\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  await leadService.updateStatus(leadId, status);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return updatedLead;\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n  await leadService.update(leadId, leadData);\n  const updatedLead = await leadService.getById(leadId);\n  if (!updatedLead) {\n    throw new Error('Lead not found after update');\n  }\n  return updatedLead;\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  return await productService.getAll();\n};\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const id = await productService.create({\n    ...productData,\n    isActive: true,\n    stockQuantity: 100, // Default stock\n    minStockLevel: 10   // Default minimum stock\n  });\n  \n  const newProduct = await productService.getById(id);\n  if (!newProduct) {\n    throw new Error('Failed to create product');\n  }\n  \n  return newProduct;\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n  await productService.update(id, productData);\n  const updatedProduct = await productService.getById(id);\n  if (!updatedProduct) {\n    throw new Error('Product not found after update');\n  }\n  return updatedProduct;\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n  await productService.delete(id);\n  return { success: true };\n};\n\n// Lead Source functions\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n  return await leadSourcesService.getAll();\n};\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n  const id = await leadSourcesService.create({\n    name,\n    isActive: true\n  });\n  \n  const newSource = await leadSourcesService.getById(id);\n  if (!newSource) {\n    throw new Error('Failed to create lead source');\n  }\n  \n  return newSource;\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n  await leadSourcesService.delete(id);\n  return { success: true };\n};\n\n// Quotation functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n  const quotations = await quotationService.getAll();\n  return quotations.sort((a, b) => {\n    const aDate = a.createdAt ? new Date(a.createdAt.toString()).getTime() : 0;\n    const bDate = b.createdAt ? new Date(b.createdAt.toString()).getTime() : 0;\n    return bDate - aDate;\n  });\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n  const quotation = await quotationService.getById(id);\n  return quotation || undefined;\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n  const quotationNumber = await quotationService.generateQuotationNumber();\n  \n  const id = await quotationService.create({\n    ...quotationData,\n    quotationNumber\n  });\n  \n  const newQuotation = await quotationService.getById(id);\n  if (!newQuotation) {\n    throw new Error('Failed to create quotation');\n  }\n  \n  return newQuotation;\n};\n\n// Quotation Template functions\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n  return await quotationTemplatesService.getAll();\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n  const template = await quotationTemplatesService.getById(id);\n  return template || undefined;\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n  const id = await quotationTemplatesService.create({\n    ...templateData,\n    isDefault: false\n  });\n  \n  const newTemplate = await quotationTemplatesService.getById(id);\n  if (!newTemplate) {\n    throw new Error('Failed to create quotation template');\n  }\n  \n  return newTemplate;\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n  await quotationTemplatesService.update(id, templateData);\n  const updatedTemplate = await quotationTemplatesService.getById(id);\n  if (!updatedTemplate) {\n    throw new Error('Template not found after update');\n  }\n  return updatedTemplate;\n};\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n  await quotationTemplatesService.delete(id);\n  return { success: true };\n};\n\n// Employee Role functions\nexport const getEmployeeRoles = async (): Promise<EmployeeRole[]> => {\n  return await employeeRolesService.getAll();\n};\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRole> => {\n  const id = await employeeRolesService.create({ name });\n  \n  const newRole = await employeeRolesService.getById(id);\n  if (!newRole) {\n    throw new Error('Failed to create employee role');\n  }\n  \n  return newRole;\n};\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n  await employeeRolesService.delete(id);\n  return { success: true };\n};\n\n// Department functions\nexport const getDepartments = async (): Promise<Department[]> => {\n  return await departmentsService.getAll();\n};\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n  const id = await departmentsService.create({ name });\n  \n  const newDepartment = await departmentsService.getById(id);\n  if (!newDepartment) {\n    throw new Error('Failed to create department');\n  }\n  \n  return newDepartment;\n};\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n  await departmentsService.delete(id);\n  return { success: true };\n};\n"],"names":[],"mappings":";;;;;;IAyDa,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/test-firestore-integration.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { addEmployee, getEmployees } from '../lib/data';\n\nexport default function TestFirestoreIntegration() {\n  const [employees, setEmployees] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const [newEmployee, setNewEmployee] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'Developer',\n    department: 'Engineering',\n    address: ''\n  });\n\n  const loadEmployees = async () => {\n    try {\n      setLoading(true);\n      const data = await getEmployees();\n      setEmployees(data);\n      setMessage(`Loaded ${data.length} employees from Firestore`);\n    } catch (error) {\n      setMessage(`Error loading employees: ${error}`);\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddEmployee = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newEmployee.name || !newEmployee.email || !newEmployee.phone || !newEmployee.address) {\n      setMessage('Please fill in all fields');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setMessage('Adding employee to Firestore...');\n      \n      const employee = await addEmployee(newEmployee);\n      setMessage(`✅ Employee \"${employee.name}\" added successfully to Firestore!`);\n      \n      // Reset form\n      setNewEmployee({\n        name: '',\n        email: '',\n        phone: '',\n        role: 'Developer',\n        department: 'Engineering',\n        address: ''\n      });\n      \n      // Reload employees\n      await loadEmployees();\n    } catch (error) {\n      setMessage(`❌ Error adding employee: ${error}`);\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadEmployees();\n  }, []);\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 bg-white\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">🔥 Firestore Integration Test</h1>\n      \n      {/* Status Message */}\n      <div className=\"mb-6 p-4 bg-gray-100 rounded-lg\">\n        <p className=\"text-sm\">\n          <strong>Status:</strong> {message || 'Ready to test Firestore integration'}\n        </p>\n        {loading && (\n          <div className=\"mt-2\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 inline-block\"></div>\n            <span className=\"ml-2 text-sm\">Loading...</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Add Employee Form */}\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <h2 className=\"text-xl font-semibold mb-4\">➕ Add New Employee (Direct to Firestore)</h2>\n          <form onSubmit={handleAddEmployee} className=\"space-y-3\">\n            <input\n              type=\"text\"\n              placeholder=\"Name\"\n              value={newEmployee.name}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, name: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n              required\n            />\n            <input\n              type=\"email\"\n              placeholder=\"Email\"\n              value={newEmployee.email}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, email: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n              required\n            />\n            <input\n              type=\"tel\"\n              placeholder=\"Phone\"\n              value={newEmployee.phone}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, phone: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n              required\n            />\n            <select\n              value={newEmployee.role}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, role: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n            >\n              <option value=\"Developer\">Developer</option>\n              <option value=\"Designer\">Designer</option>\n              <option value=\"Manager\">Manager</option>\n              <option value=\"Admin\">Admin</option>\n            </select>\n            <select\n              value={newEmployee.department}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, department: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n            >\n              <option value=\"Engineering\">Engineering</option>\n              <option value=\"Design\">Design</option>\n              <option value=\"Marketing\">Marketing</option>\n              <option value=\"Sales\">Sales</option>\n            </select>\n            <input\n              type=\"text\"\n              placeholder=\"Address\"\n              value={newEmployee.address}\n              onChange={(e) => setNewEmployee(prev => ({ ...prev, address: e.target.value }))}\n              className=\"w-full p-2 border rounded\"\n              required\n            />\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 disabled:opacity-50\"\n            >\n              {loading ? 'Adding to Firestore...' : 'Add Employee to Firestore'}\n            </button>\n          </form>\n        </div>\n\n        {/* Employees List */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">👥 Employees from Firestore ({employees.length})</h2>\n            <button\n              onClick={loadEmployees}\n              disabled={loading}\n              className=\"bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 disabled:opacity-50\"\n            >\n              Refresh\n            </button>\n          </div>\n          \n          {employees.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No employees found in Firestore</p>\n              <p className=\"text-sm mt-2\">Add an employee above to test the integration</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {employees.map((employee) => (\n                <div key={employee.id} className=\"bg-white p-3 rounded border\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium\">{employee.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{employee.email}</p>\n                      <p className=\"text-sm text-gray-500\">{employee.phone}</p>\n                      <p className=\"text-sm text-gray-500\">{employee.role} - {employee.department}</p>\n                      <p className=\"text-sm text-gray-400\">{employee.address}</p>\n                      {employee.createdAt && (\n                        <p className=\"text-xs text-gray-400\">\n                          Added: {new Date(employee.createdAt.toDate()).toLocaleString()}\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-xs\">\n                      Firestore\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"mt-8 bg-yellow-50 p-4 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-2\">🧪 Testing Instructions</h3>\n        <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n          <li>Fill out the employee form above</li>\n          <li>Click \"Add Employee to Firestore\"</li>\n          <li>Watch as the employee is added directly to Firestore (no JSON files!)</li>\n          <li>The employee list will automatically refresh to show the new data</li>\n          <li>Check your Firebase Console to see the data in Firestore</li>\n          <li>Try adding multiple employees to see real-time updates</li>\n        </ol>\n        \n        <div className=\"mt-4 p-3 bg-green-100 rounded\">\n          <p className=\"text-sm font-medium text-green-800\">✅ Success Indicators:</p>\n          <ul className=\"text-xs text-green-700 mt-1 list-disc list-inside\">\n            <li>Status shows \"Employee added successfully to Firestore!\"</li>\n            <li>Employee appears in the list immediately</li>\n            <li>Employee has a \"Firestore\" badge</li>\n            <li>Data persists after page refresh</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 692, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}