{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/status-badge.tsx"],"sourcesContent":["import { Badge } from '@/components/ui/badge';\nimport type { LeadStatus } from '@/lib/types';\nimport { cn } from '@/lib/utils';\n\ntype StatusBadgeProps = {\n  status: LeadStatus;\n  className?: string;\n};\n\nexport function StatusBadge({ status, className }: StatusBadgeProps) {\n  const statusStyles: Record<LeadStatus, string> = {\n    'New': 'bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800',\n    'In Discussion': 'bg-purple-100 text-purple-800 border-purple-200 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-800',\n    'Negotiation': 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/30 dark:text-yellow-300 dark:border-yellow-800',\n    'Closed - Won': 'bg-green-100 text-green-800 border-green-200 dark:bg-green-900/30 dark:text-green-300 dark:border-green-800',\n    'Closed - Lost': 'bg-red-100 text-red-800 border-red-200 dark:bg-red-900/30 dark:text-red-300 dark:border-red-800',\n  };\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className={cn('font-medium', statusStyles[status], className)}\n    >\n      {status}\n    </Badge>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAOO,SAAS,YAAY,EAAE,MAAM,EAAE,SAAS,EAAoB;IACjE,MAAM,eAA2C;QAC/C,OAAO;QACP,iBAAiB;QACjB,eAAe;QACf,gBAAgB;QAChB,iBAAiB;IACnB;IAEA,qBACE,8OAAC,iIAAA,CAAA,QAAK;QACJ,SAAQ;QACR,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe,YAAY,CAAC,OAAO,EAAE;kBAElD;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IA4HsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/types.ts"],"sourcesContent":["\nexport type LeadStatus = 'New' | 'In Discussion' | 'Negotiation' | 'Closed - Won' | 'Closed - Lost';\n\nexport const ALL_STATUSES: LeadStatus[] = ['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost'];\n\nexport type ActivityType = 'Meeting' | 'Call' | 'Email' | 'Revision Request' | 'Proposal Sent';\n\nexport type LeadSource = {\n  id: string;\n  name: string;\n};\n\nexport type Activity = {\n  id: string;\n  date: string; // ISO 8601 format\n  type: ActivityType;\n  notes: string;\n  summary?: string;\n};\n\nexport type Product = {\n  id: string;\n  name:string;\n  description: string;\n  price: number;\n  gstRate: number;\n  skus?: string[];\n  catalogueUrl?: string;\n};\n\nexport type NewProduct = Omit<Product, 'id'>;\n\nexport type LeadProduct = {\n  productId: string;\n  quantity: number;\n  rate: number;\n  selectedSku?: string;\n};\n\nexport type PopulatedLeadProduct = LeadProduct & {\n  product: Product;\n  amount: number;\n};\n\nexport type Lead = {\n  id: string;\n  name: string;\n  company: string;\n  email: string;\n  phone: string;\n  whatsappNumber?: string;\n  status: LeadStatus;\n  source: string;\n  createdAt: string; // ISO 8601 format\n  activities: Activity[];\n  products: LeadProduct[];\n};\n\nexport type UpdatableLeadData = Omit<Lead, 'id' | 'createdAt' | 'activities'>;\n\nexport type QuotationStatus = 'Draft' | 'Sent' | 'Accepted' | 'Rejected';\nexport const ALL_QUOTATION_STATUSES: QuotationStatus[] = ['Draft', 'Sent', 'Accepted', 'Rejected'];\n\nexport type QuotationProduct = {\n  productId: string;\n  quantity: number;\n  rate: number;\n  gstRate: number;\n};\n\nexport type PopulatedQuotationProduct = QuotationProduct & {\n    product: Product;\n    amount: number;\n    gstAmount: number;\n};\n\nexport type Quotation = {\n  id: string;\n  quotationNumber: string;\n  leadId: string;\n  date: string;\n  validUntil: string;\n  products: QuotationProduct[];\n  subTotal: number;\n  totalGst: number;\n  grandTotal: number;\n  status: QuotationStatus;\n  templateId: string;\n  createdAt: string;\n  // Template fields that can be overridden\n  logoUrl?: string;\n  companyName: string;\n  companyAddress: string;\n  companyGst: string;\n  termsAndConditions: string;\n};\n\nexport type QuotationTemplate = {\n    id: string;\n    name: string;\n    logoUrl?: string;\n    companyName: string;\n    companyAddress: string;\n    companyGst: string;\n    termsAndConditions: string;\n};\n\nexport type NewQuotationTemplate = Omit<QuotationTemplate, 'id'>;\n\nexport type EmployeeRoleData = {\n    id: string;\n    name: string;\n};\n\nexport type EmployeeRole = EmployeeRoleData['name'];\n\nexport type Department = {\n    id: string;\n    name: string;\n};\n\nexport type Employee = {\n    id: string;\n    name: string;\n    email: string;\n    phone: string;\n    role: EmployeeRole;\n    department: string;\n    address: string;\n    createdAt: string;\n};\n\nexport type NewEmployee = Omit<Employee, 'id' | 'createdAt'>;\n"],"names":[],"mappings":";;;;AAGO,MAAM,eAA6B;IAAC;IAAO;IAAiB;IAAe;IAAgB;CAAgB;AA0D3G,MAAM,yBAA4C;IAAC;IAAS;IAAQ;IAAY;CAAW","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["\n'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { Lead, Activity, Product, LeadSource, UpdatableLeadData, Quotation, QuotationTemplate, NewProduct, Employee, NewEmployee, EmployeeRoleData, Department } from '../types';\n\nconst dataPath = path.join(process.cwd(), 'src', 'lib', 'data');\n\nasync function readData<T>(filename: string): Promise<T[]> {\n  try {\n    const filePath = path.join(dataPath, filename);\n    const fileContent = await fs.readFile(filePath, 'utf-8');\n    return JSON.parse(fileContent);\n  } catch (error) {\n    if (isNodeError(error) && error.code === 'ENOENT') {\n      // If the file doesn't exist, create it with an empty array\n      await writeData(filename, []);\n      return [];\n    }\n    console.error(`Error reading ${filename}:`, error);\n    throw new Error(`Could not read ${filename}`);\n  }\n}\n\nasync function writeData<T>(filename: string, data: T[]): Promise<void> {\n  try {\n    const filePath = path.join(dataPath, filename);\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n  } catch (error)\n{\n    console.error(`Error writing ${filename}:`, error);\n    throw new Error(`Could not write to ${filename}`);\n  }\n}\n\nfunction isNodeError(error: unknown): error is NodeJS.ErrnoException {\n    return error instanceof Error;\n}\n\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads = await readData<Lead>('leads.json');\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n\n  if (status) {\n    leads = leads.filter(lead => lead.status === status);\n  }\n  \n  return leads.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n    const leads = await getLeads();\n    const lead = leads.find(lead => lead.id === id);\n    if (!lead) return undefined;\n    \n    return {\n      ...lead,\n      activities: lead.activities.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n    const leads = await getLeads();\n    const allActivities = leads.flatMap(lead => \n        lead.activities.map(activity => ({ lead, activity }))\n    );\n    return allActivities\n        .sort((a, b) => new Date(b.activity.date).getTime() - new Date(a.activity.date).getTime())\n        .slice(0, limit);\n}\n\nexport const getProducts = async (): Promise<Product[]> => {\n  return await readData<Product>('products.json');\n}\n\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n    return await readData<LeadSource>('lead-sources.json');\n}\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const products = await getProducts();\n  const newProduct: Product = {\n    ...productData,\n    id: `prod-${Date.now()}`,\n  };\n  products.unshift(newProduct);\n  await writeData<Product>('products.json', products);\n  return newProduct;\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n    const products = await getProducts();\n    const productIndex = products.findIndex(p => p.id === id);\n    if (productIndex === -1) {\n        throw new Error('Product not found');\n    }\n    const updatedProduct = { ...products[productIndex], ...productData };\n    products[productIndex] = updatedProduct;\n    await writeData<Product>('products.json', products);\n    return updatedProduct;\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n    let products = await getProducts();\n    const initialLength = products.length;\n    products = products.filter(p => p.id !== id);\n    if (products.length === initialLength) {\n        throw new Error('Product not found for deletion');\n    }\n    await writeData<Product>('products.json', products);\n    return { success: true };\n};\n\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n    const leadSources = await getLeadSources();\n    const newSource: LeadSource = {\n        id: `source-${Date.now()}`,\n        name,\n    };\n    leadSources.unshift(newSource);\n    await writeData<LeadSource>('lead-sources.json', leadSources);\n    return newSource;\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n    let leadSources = await getLeadSources();\n    const initialLength = leadSources.length;\n    leadSources = leadSources.filter(source => source.id !== id);\n    await writeData<LeadSource>('lead-sources.json', leadSources);\n    return { success: leadSources.length < initialLength };\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const leads = await getLeads();\n  const newId = `lead-${Date.now()}`;\n  \n  const initialActivity: Activity[] = [];\n  if (leadData.notes) {\n    initialActivity.push({\n      id: `act-${newId}-1`,\n      date: new Date().toISOString(),\n      type: 'Email', \n      notes: `Lead created in the system. Initial notes: ${leadData.notes}`,\n    });\n  }\n\n  const { notes, ...restOfLeadData } = leadData;\n\n  const newLead: Lead = {\n    ...restOfLeadData,\n    id: newId,\n    createdAt: new Date().toISOString(),\n    activities: initialActivity,\n  };\n  leads.unshift(newLead);\n  await writeData<Lead>('leads.json', leads);\n  return newLead;\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const leads = await getLeads();\n  const leadIndex = leads.findIndex(l => l.id === leadId);\n  if (leadIndex === -1) {\n    throw new Error('Lead not found');\n  }\n\n  const lead = leads[leadIndex];\n  const newActivity: Activity = {\n    ...activityData,\n    id: `act-${leadId}-${lead.activities.length + 1}`,\n    date: new Date().toISOString(),\n  };\n  lead.activities.unshift(newActivity);\n  \n  await writeData<Lead>('leads.json', leads);\n  return newActivity;\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  const leads = await getLeads();\n  const leadIndex = leads.findIndex(l => l.id === leadId);\n  if (leadIndex === -1) {\n    throw new Error('Lead not found');\n  }\n\n  leads[leadIndex].status = status;\n  await writeData<Lead>('leads.json', leads);\n  return leads[leadIndex];\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n    const leads = await getLeads();\n    const leadIndex = leads.findIndex(l => l.id === leadId);\n    if (leadIndex === -1) {\n      throw new Error('Lead not found');\n    }\n  \n    const originalLead = leads[leadIndex];\n    const updatedLead: Lead = {\n      ...originalLead,\n      ...leadData,\n    };\n  \n    leads[leadIndex] = updatedLead;\n    await writeData<Lead>('leads.json', leads);\n    return updatedLead;\n};\n\n// Quotation specific functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n    const quotations = await readData<Quotation>('quotations.json');\n    return quotations.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n    const quotations = await getQuotations();\n    return quotations.find(q => q.id === id);\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n    const quotations = await getQuotations();\n    const newQuotationNumber = `QUO-${String(quotations.length + 1).padStart(4, '0')}`;\n    const newQuotation: Quotation = {\n        ...quotationData,\n        id: `quo-${Date.now()}`,\n        quotationNumber: newQuotationNumber,\n        createdAt: new Date().toISOString(),\n    };\n    quotations.unshift(newQuotation);\n    await writeData<Quotation>('quotations.json', quotations);\n    return newQuotation;\n};\n\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n    return await readData<QuotationTemplate>('quotation-templates.json');\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n    const templates = await getQuotationTemplates();\n    return templates.find(t => t.id === id);\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n    const templates = await getQuotationTemplates();\n    const newTemplate: QuotationTemplate = {\n        ...templateData,\n        id: `template-${Date.now()}`,\n    };\n    templates.unshift(newTemplate);\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return newTemplate;\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n    const templates = await getQuotationTemplates();\n    const templateIndex = templates.findIndex(t => t.id === id);\n    if (templateIndex === -1) {\n        throw new Error('Template not found');\n    }\n    templates[templateIndex] = { ...templates[templateIndex], ...templateData };\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return templates[templateIndex];\n}\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n    let templates = await getQuotationTemplates();\n    const initialLength = templates.length;\n    templates = templates.filter(t => t.id !== id);\n    if (templates.length === initialLength) {\n        throw new Error('Template not found for deletion');\n    }\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return { success: true };\n}\n\n\n// Employee specific functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n    const employees = await readData<Employee>('employees.json');\n    return employees.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n    const employees = await getEmployees();\n    return employees.find(employee => employee.id === id);\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n    const employees = await getEmployees();\n    const newEmployee: Employee = {\n        ...employeeData,\n        id: `emp-${Date.now()}`,\n        createdAt: new Date().toISOString(),\n    };\n    employees.unshift(newEmployee);\n    await writeData<Employee>('employees.json', employees);\n    return newEmployee;\n};\n\nexport const getEmployeeRoles = async (): Promise<EmployeeRoleData[]> => {\n    return await readData<EmployeeRoleData>('employee-roles.json');\n}\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRoleData> => {\n    const roles = await getEmployeeRoles();\n    const newRole: EmployeeRoleData = {\n        id: `role-${Date.now()}`,\n        name,\n    };\n    roles.push(newRole);\n    await writeData<EmployeeRoleData>('employee-roles.json', roles);\n    return newRole;\n}\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n    let roles = await getEmployeeRoles();\n    const initialLength = roles.length;\n    roles = roles.filter(role => role.id !== id);\n    await writeData<EmployeeRoleData>('employee-roles.json', roles);\n    return { success: roles.length < initialLength };\n}\n\nexport const getDepartments = async (): Promise<Department[]> => {\n    return await readData<Department>('departments.json');\n}\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n    const departments = await getDepartments();\n    const newDepartment: Department = {\n        id: `dept-${Date.now()}`,\n        name,\n    };\n    departments.push(newDepartment);\n    await writeData<Department>('departments.json', departments);\n    return newDepartment;\n}\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n    let departments = await getDepartments();\n    const initialLength = departments.length;\n    departments = departments.filter(dept => dept.id !== id);\n    await writeData<Department>('departments.json', departments);\n    return { success: departments.length < initialLength };\n}\n"],"names":[],"mappings":";;;;;;IAgFa,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["\n'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { Lead, Activity, Product, LeadSource, UpdatableLeadData, Quotation, QuotationTemplate, NewProduct, Employee, NewEmployee, EmployeeRoleData, Department } from '../types';\n\nconst dataPath = path.join(process.cwd(), 'src', 'lib', 'data');\n\nasync function readData<T>(filename: string): Promise<T[]> {\n  try {\n    const filePath = path.join(dataPath, filename);\n    const fileContent = await fs.readFile(filePath, 'utf-8');\n    return JSON.parse(fileContent);\n  } catch (error) {\n    if (isNodeError(error) && error.code === 'ENOENT') {\n      // If the file doesn't exist, create it with an empty array\n      await writeData(filename, []);\n      return [];\n    }\n    console.error(`Error reading ${filename}:`, error);\n    throw new Error(`Could not read ${filename}`);\n  }\n}\n\nasync function writeData<T>(filename: string, data: T[]): Promise<void> {\n  try {\n    const filePath = path.join(dataPath, filename);\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n  } catch (error)\n{\n    console.error(`Error writing ${filename}:`, error);\n    throw new Error(`Could not write to ${filename}`);\n  }\n}\n\nfunction isNodeError(error: unknown): error is NodeJS.ErrnoException {\n    return error instanceof Error;\n}\n\nexport const getLeads = async (query?: string, status?: string): Promise<Lead[]> => {\n  let leads = await readData<Lead>('leads.json');\n  \n  if (query) {\n    const lowercasedQuery = query.toLowerCase();\n    leads = leads.filter(\n      lead =>\n        lead.name.toLowerCase().includes(lowercasedQuery) ||\n        lead.company.toLowerCase().includes(lowercasedQuery)\n    );\n  }\n\n  if (status) {\n    leads = leads.filter(lead => lead.status === status);\n  }\n  \n  return leads.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getLeadById = async (id: string): Promise<Lead | undefined> => {\n    const leads = await getLeads();\n    const lead = leads.find(lead => lead.id === id);\n    if (!lead) return undefined;\n    \n    return {\n      ...lead,\n      activities: lead.activities.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    };\n};\n\nexport const getRecentActivities = async (limit: number): Promise<{ lead: Lead; activity: Activity }[]> => {\n    const leads = await getLeads();\n    const allActivities = leads.flatMap(lead => \n        lead.activities.map(activity => ({ lead, activity }))\n    );\n    return allActivities\n        .sort((a, b) => new Date(b.activity.date).getTime() - new Date(a.activity.date).getTime())\n        .slice(0, limit);\n}\n\nexport const getProducts = async (): Promise<Product[]> => {\n  return await readData<Product>('products.json');\n}\n\nexport const getLeadSources = async (): Promise<LeadSource[]> => {\n    return await readData<LeadSource>('lead-sources.json');\n}\n\nexport const addProduct = async (productData: NewProduct): Promise<Product> => {\n  const products = await getProducts();\n  const newProduct: Product = {\n    ...productData,\n    id: `prod-${Date.now()}`,\n  };\n  products.unshift(newProduct);\n  await writeData<Product>('products.json', products);\n  return newProduct;\n};\n\nexport const updateProduct = async (id: string, productData: NewProduct): Promise<Product> => {\n    const products = await getProducts();\n    const productIndex = products.findIndex(p => p.id === id);\n    if (productIndex === -1) {\n        throw new Error('Product not found');\n    }\n    const updatedProduct = { ...products[productIndex], ...productData };\n    products[productIndex] = updatedProduct;\n    await writeData<Product>('products.json', products);\n    return updatedProduct;\n};\n\nexport const deleteProduct = async (id: string): Promise<{ success: boolean }> => {\n    let products = await getProducts();\n    const initialLength = products.length;\n    products = products.filter(p => p.id !== id);\n    if (products.length === initialLength) {\n        throw new Error('Product not found for deletion');\n    }\n    await writeData<Product>('products.json', products);\n    return { success: true };\n};\n\n\nexport const addLeadSource = async (name: string): Promise<LeadSource> => {\n    const leadSources = await getLeadSources();\n    const newSource: LeadSource = {\n        id: `source-${Date.now()}`,\n        name,\n    };\n    leadSources.unshift(newSource);\n    await writeData<LeadSource>('lead-sources.json', leadSources);\n    return newSource;\n};\n\nexport const deleteLeadSource = async (id: string): Promise<{ success: boolean }> => {\n    let leadSources = await getLeadSources();\n    const initialLength = leadSources.length;\n    leadSources = leadSources.filter(source => source.id !== id);\n    await writeData<LeadSource>('lead-sources.json', leadSources);\n    return { success: leadSources.length < initialLength };\n};\n\nexport const addLead = async (leadData: Omit<Lead, 'id' | 'createdAt' | 'activities'> & { notes?: string }): Promise<Lead> => {\n  const leads = await getLeads();\n  const newId = `lead-${Date.now()}`;\n  \n  const initialActivity: Activity[] = [];\n  if (leadData.notes) {\n    initialActivity.push({\n      id: `act-${newId}-1`,\n      date: new Date().toISOString(),\n      type: 'Email', \n      notes: `Lead created in the system. Initial notes: ${leadData.notes}`,\n    });\n  }\n\n  const { notes, ...restOfLeadData } = leadData;\n\n  const newLead: Lead = {\n    ...restOfLeadData,\n    id: newId,\n    createdAt: new Date().toISOString(),\n    activities: initialActivity,\n  };\n  leads.unshift(newLead);\n  await writeData<Lead>('leads.json', leads);\n  return newLead;\n};\n\nexport const addActivityToLead = async (leadId: string, activityData: Omit<Activity, 'id' | 'date'>): Promise<Activity> => {\n  const leads = await getLeads();\n  const leadIndex = leads.findIndex(l => l.id === leadId);\n  if (leadIndex === -1) {\n    throw new Error('Lead not found');\n  }\n\n  const lead = leads[leadIndex];\n  const newActivity: Activity = {\n    ...activityData,\n    id: `act-${leadId}-${lead.activities.length + 1}`,\n    date: new Date().toISOString(),\n  };\n  lead.activities.unshift(newActivity);\n  \n  await writeData<Lead>('leads.json', leads);\n  return newActivity;\n};\n\nexport const updateLeadStatus = async (leadId: string, status: Lead['status']): Promise<Lead> => {\n  const leads = await getLeads();\n  const leadIndex = leads.findIndex(l => l.id === leadId);\n  if (leadIndex === -1) {\n    throw new Error('Lead not found');\n  }\n\n  leads[leadIndex].status = status;\n  await writeData<Lead>('leads.json', leads);\n  return leads[leadIndex];\n};\n\nexport const updateLead = async (leadId: string, leadData: UpdatableLeadData): Promise<Lead> => {\n    const leads = await getLeads();\n    const leadIndex = leads.findIndex(l => l.id === leadId);\n    if (leadIndex === -1) {\n      throw new Error('Lead not found');\n    }\n  \n    const originalLead = leads[leadIndex];\n    const updatedLead: Lead = {\n      ...originalLead,\n      ...leadData,\n    };\n  \n    leads[leadIndex] = updatedLead;\n    await writeData<Lead>('leads.json', leads);\n    return updatedLead;\n};\n\n// Quotation specific functions\nexport const getQuotations = async (): Promise<Quotation[]> => {\n    const quotations = await readData<Quotation>('quotations.json');\n    return quotations.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getQuotationById = async (id: string): Promise<Quotation | undefined> => {\n    const quotations = await getQuotations();\n    return quotations.find(q => q.id === id);\n};\n\nexport const addQuotation = async (quotationData: Omit<Quotation, 'id' | 'createdAt' | 'quotationNumber'>): Promise<Quotation> => {\n    const quotations = await getQuotations();\n    const newQuotationNumber = `QUO-${String(quotations.length + 1).padStart(4, '0')}`;\n    const newQuotation: Quotation = {\n        ...quotationData,\n        id: `quo-${Date.now()}`,\n        quotationNumber: newQuotationNumber,\n        createdAt: new Date().toISOString(),\n    };\n    quotations.unshift(newQuotation);\n    await writeData<Quotation>('quotations.json', quotations);\n    return newQuotation;\n};\n\nexport const getQuotationTemplates = async (): Promise<QuotationTemplate[]> => {\n    return await readData<QuotationTemplate>('quotation-templates.json');\n};\n\nexport const getQuotationTemplateById = async (id: string): Promise<QuotationTemplate | undefined> => {\n    const templates = await getQuotationTemplates();\n    return templates.find(t => t.id === id);\n};\n\nexport const addQuotationTemplate = async (templateData: Omit<QuotationTemplate, 'id'>): Promise<QuotationTemplate> => {\n    const templates = await getQuotationTemplates();\n    const newTemplate: QuotationTemplate = {\n        ...templateData,\n        id: `template-${Date.now()}`,\n    };\n    templates.unshift(newTemplate);\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return newTemplate;\n};\n\nexport const updateQuotationTemplate = async (id: string, templateData: QuotationTemplate): Promise<QuotationTemplate> => {\n    const templates = await getQuotationTemplates();\n    const templateIndex = templates.findIndex(t => t.id === id);\n    if (templateIndex === -1) {\n        throw new Error('Template not found');\n    }\n    templates[templateIndex] = { ...templates[templateIndex], ...templateData };\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return templates[templateIndex];\n}\n\nexport const deleteQuotationTemplate = async (id: string): Promise<{ success: boolean }> => {\n    let templates = await getQuotationTemplates();\n    const initialLength = templates.length;\n    templates = templates.filter(t => t.id !== id);\n    if (templates.length === initialLength) {\n        throw new Error('Template not found for deletion');\n    }\n    await writeData<QuotationTemplate>('quotation-templates.json', templates);\n    return { success: true };\n}\n\n\n// Employee specific functions\nexport const getEmployees = async (): Promise<Employee[]> => {\n    const employees = await readData<Employee>('employees.json');\n    return employees.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n};\n\nexport const getEmployeeById = async (id: string): Promise<Employee | undefined> => {\n    const employees = await getEmployees();\n    return employees.find(employee => employee.id === id);\n};\n\nexport const addEmployee = async (employeeData: NewEmployee): Promise<Employee> => {\n    const employees = await getEmployees();\n    const newEmployee: Employee = {\n        ...employeeData,\n        id: `emp-${Date.now()}`,\n        createdAt: new Date().toISOString(),\n    };\n    employees.unshift(newEmployee);\n    await writeData<Employee>('employees.json', employees);\n    return newEmployee;\n};\n\nexport const getEmployeeRoles = async (): Promise<EmployeeRoleData[]> => {\n    return await readData<EmployeeRoleData>('employee-roles.json');\n}\n\nexport const addEmployeeRole = async (name: string): Promise<EmployeeRoleData> => {\n    const roles = await getEmployeeRoles();\n    const newRole: EmployeeRoleData = {\n        id: `role-${Date.now()}`,\n        name,\n    };\n    roles.push(newRole);\n    await writeData<EmployeeRoleData>('employee-roles.json', roles);\n    return newRole;\n}\n\nexport const deleteEmployeeRole = async (id: string): Promise<{ success: boolean }> => {\n    let roles = await getEmployeeRoles();\n    const initialLength = roles.length;\n    roles = roles.filter(role => role.id !== id);\n    await writeData<EmployeeRoleData>('employee-roles.json', roles);\n    return { success: roles.length < initialLength };\n}\n\nexport const getDepartments = async (): Promise<Department[]> => {\n    return await readData<Department>('departments.json');\n}\n\nexport const addDepartment = async (name: string): Promise<Department> => {\n    const departments = await getDepartments();\n    const newDepartment: Department = {\n        id: `dept-${Date.now()}`,\n        name,\n    };\n    departments.push(newDepartment);\n    await writeData<Department>('departments.json', departments);\n    return newDepartment;\n}\n\nexport const deleteDepartment = async (id: string): Promise<{ success: boolean }> => {\n    let departments = await getDepartments();\n    const initialLength = departments.length;\n    departments = departments.filter(dept => dept.id !== id);\n    await writeData<Department>('departments.json', departments);\n    return { success: departments.length < initialLength };\n}\n"],"names":[],"mappings":";;;;;;IAoFa,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 639, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/leads/%5Bid%5D/edit-lead-dialog.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useForm, useFieldArray, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { PlusCircle, Trash2, Pencil } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from '@/components/ui/select';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n    TableFooter as UiTableFooter,\n  } from '@/components/ui/table';\nimport { updateLead } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { ALL_STATUSES, Product, LeadSource, Lead } from '@/lib/types';\nimport { getProducts, getLeadSources } from '@/lib/data';\n\nconst leadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1, 'Quantity must be at least 1'),\n    rate: z.coerce.number().min(0, 'Rate must be a positive number'),\n    selectedSku: z.string().optional(),\n});\n\nconst leadSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  company: z.string().min(2, { message: 'Company must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  phone: z.string().min(10, { message: 'Please enter a valid phone number.' }),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(ALL_STATUSES),\n  source: z.string().min(1, { message: 'Please select a lead source.' }),\n  products: z.array(leadProductSchema).optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadSchema>;\n\ntype EditLeadDialogProps = {\n  lead: Lead;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nexport function EditLeadDialog({ lead, open, onOpenChange }: EditLeadDialogProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const isControlled = open !== undefined && onOpenChange !== undefined;\n  const currentOpen = isControlled ? open : internalOpen;\n  const setCurrentOpen = isControlled ? onOpenChange : setInternalOpen;\n  \n  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);\n  const [leadSources, setLeadSources] = useState<LeadSource[]>([]);\n  const { toast } = useToast();\n\n  const { register, handleSubmit, reset, control, setValue, watch, formState: { errors, isSubmitting } } = useForm<LeadFormData>({\n    resolver: zodResolver(leadSchema),\n    defaultValues: {\n      ...lead,\n      products: lead.products || [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'products',\n  });\n\n  const watchedProducts = watch('products');\n\n  const productTotals = watchedProducts?.map(p => {\n    const productDetails = availableProducts.find(ap => ap.id === p.productId);\n    if (!productDetails) return { amount: 0, gst: 0, total: 0 };\n    const amount = p.quantity * p.rate;\n    const gst = amount * (productDetails.gstRate / 100);\n    return { amount, gst, total: amount + gst };\n  }) || [];\n  \n  const grandTotal = productTotals.reduce((acc, curr) => acc + curr.total, 0);\n\n  useEffect(() => {\n    async function fetchData() {\n        if (currentOpen) {\n            const [fetchedProducts, fetchedLeadSources] = await Promise.all([\n                getProducts(),\n                getLeadSources(),\n            ]);\n            setAvailableProducts(fetchedProducts);\n            setLeadSources(fetchedLeadSources);\n        }\n    }\n    fetchData();\n  }, [currentOpen]);\n  \n  useEffect(() => {\n    if (currentOpen) {\n      reset({\n        ...lead,\n        products: lead.products || [],\n      });\n    }\n  }, [currentOpen, lead, reset]);\n\n\n  const onSubmit = async (data: LeadFormData) => {\n    const formData = new FormData();\n    \n    Object.entries(data).forEach(([key, value]) => {\n        if (key === 'products') {\n            formData.append('products', JSON.stringify(value));\n        } else if (value) {\n            formData.append(key, value as string);\n        }\n    });\n\n    const result = await updateLead(lead.id, formData);\n\n    if (result.message === 'Successfully updated lead.') {\n      toast({\n        title: 'Lead Updated',\n        description: `Lead \"${data.name}\" has been successfully updated.`,\n      });\n      setCurrentOpen(false);\n    } else {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: result.message,\n        });\n    }\n  };\n\n  const handleProductChange = (productId: string, index: number) => {\n    const product = availableProducts.find(p => p.id === productId);\n    if (product) {\n      setValue(`products.${index}.rate`, product.price, { shouldValidate: true });\n      setValue(`products.${index}.selectedSku`, undefined);\n    }\n  };\n\n  const dialog = (\n    <Dialog open={currentOpen} onOpenChange={setCurrentOpen}>\n      <DialogContent className=\"sm:max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle>Edit Lead</DialogTitle>\n          <DialogDescription>\n            Update the details for this lead.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid gap-4 py-4 max-h-[70vh] overflow-y-auto pr-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Name</Label>\n                        <Input id=\"name\" {...register('name')} className={errors.name ? 'border-destructive' : ''} />\n                        {errors.name && <p className=\"text-xs text-destructive mt-1\">{errors.name.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"company\">Company</Label>\n                        <Input id=\"company\" {...register('company')} className={errors.company ? 'border-destructive' : ''} />\n                        {errors.company && <p className=\"text-xs text-destructive mt-1\">{errors.company.message}</p>}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input id=\"email\" type=\"email\" {...register('email')} className={errors.email ? 'border-destructive' : ''} />\n                        {errors.email && <p className=\"text-xs text-destructive mt-1\">{errors.email.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone</Label>\n                        <Input id=\"phone\" {...register('phone')} className={errors.phone ? 'border-destructive' : ''} />\n                        {errors.phone && <p className=\"text-xs text-destructive mt-1\">{errors.phone.message}</p>}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"whatsappNumber\">WhatsApp Number</Label>\n                        <Input id=\"whatsappNumber\" {...register('whatsappNumber')} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"source\">Lead Source</Label>\n                        <Controller\n                            control={control}\n                            name=\"source\"\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                    <SelectTrigger id=\"source\" className={errors.source ? 'border-destructive' : ''}>\n                                        <SelectValue placeholder=\"Select a source\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        {leadSources.map(source => (\n                                            <SelectItem key={source.id} value={source.name}>{source.name}</SelectItem>\n                                        ))}\n                                    </SelectContent>\n                                </Select>\n                            )}\n                        />\n                        {errors.source && <p className=\"text-xs text-destructive mt-1\">{errors.source.message}</p>}\n                    </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                    <Label>Products Interested</Label>\n                    <div className=\"border rounded-lg\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-[25%]\">Product</TableHead>\n                                    <TableHead className=\"w-[15%]\">SKU</TableHead>\n                                    <TableHead>Qty</TableHead>\n                                    <TableHead>Rate (₹)</TableHead>\n                                    <TableHead>GST</TableHead>\n                                    <TableHead className=\"text-right\">Amount (₹)</TableHead>\n                                    <TableHead className=\"w-[50px]\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {fields.map((field, index) => {\n                                    const productDetails = availableProducts.find(p => p.id === watchedProducts?.[index]?.productId);\n                                    const { total } = productTotals[index] || { total: 0 };\n                                    \n                                    return (\n                                    <TableRow key={field.id}>\n                                        <TableCell>\n                                            <Controller\n                                                control={control}\n                                                name={`products.${index}.productId`}\n                                                render={({ field }) => (\n                                                    <Select onValueChange={(value) => {\n                                                        field.onChange(value);\n                                                        handleProductChange(value, index);\n                                                    }} value={field.value}>\n                                                        <SelectTrigger>\n                                                            <SelectValue placeholder=\"Select product\" />\n                                                        </SelectTrigger>\n                                                        <SelectContent>\n                                                            {availableProducts.map(p => (\n                                                                <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>\n                                                            ))}\n                                                        </SelectContent>\n                                                    </Select>\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            {productDetails?.skus && productDetails.skus.length > 0 ? (\n                                                <Controller\n                                                    control={control}\n                                                    name={`products.${index}.selectedSku`}\n                                                    render={({ field }) => (\n                                                        <Select onValueChange={field.onChange} value={field.value}>\n                                                            <SelectTrigger>\n                                                                <SelectValue placeholder=\"SKU\" />\n                                                            </SelectTrigger>\n                                                            <SelectContent>\n                                                                {productDetails.skus?.map(sku => (\n                                                                    <SelectItem key={sku} value={sku}>{sku}</SelectItem>\n                                                                ))}\n                                                            </SelectContent>\n                                                        </Select>\n                                                    )}\n                                                />\n                                            ) : (\n                                                <div className=\"text-xs text-muted-foreground\">N/A</div>\n                                            )}\n                                        </TableCell>\n                                        <TableCell>\n                                            <Input type=\"number\" {...register(`products.${index}.quantity`)} min=\"1\" className=\"w-20\" />\n                                        </TableCell>\n                                        <TableCell>\n                                            <Input type=\"number\" {...register(`products.${index}.rate`)} min=\"0\" className=\"w-24\" />\n                                        </TableCell>\n                                        <TableCell>{productDetails ? `${productDetails.gstRate}%` : '-'}</TableCell>\n                                        <TableCell className=\"text-right font-medium\">{total.toFixed(2)}</TableCell>\n                                        <TableCell>\n                                            <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => remove(index)}>\n                                                <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                )})}\n                                {fields.length === 0 && (\n                                    <TableRow>\n                                        <TableCell colSpan={7} className=\"text-center text-muted-foreground h-24\">\n                                            No products added.\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                            <UiTableFooter>\n                                <TableRow>\n                                    <TableCell colSpan={5} className=\"text-right font-bold\">Grand Total (₹)</TableCell>\n                                    <TableCell className=\"text-right font-bold\">{grandTotal.toFixed(2)}</TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n                            </UiTableFooter>\n                        </Table>\n                    </div>\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => append({ productId: '', quantity: 1, rate: 0, selectedSku: '' })}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Product\n                    </Button>\n                </div>\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Controller\n                        control={control}\n                        name=\"status\"\n                        render={({ field }) => (\n                            <Select onValueChange={field.onChange} value={field.value}>\n                                <SelectTrigger className=\"w-[180px]\">\n                                    <SelectValue placeholder=\"Set status\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {ALL_STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}\n                                </SelectContent>\n                            </Select>\n                        )}\n                    />\n                </div>\n            </div>\n            <DialogFooter className=\"pt-4 border-t\">\n                <Button type=\"submit\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Saving...' : 'Save Changes'}\n                </Button>\n            </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n  \n  // If the dialog is not controlled, we need a trigger.\n  if (!isControlled) {\n    return (\n      <Dialog open={currentOpen} onOpenChange={setCurrentOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\">\n              <Pencil className=\"mr-2 h-4 w-4\" />\n              Edit Lead\n          </Button>\n        </DialogTrigger>\n        {dialog.props.children}\n      </Dialog>\n    );\n  }\n\n  // If controlled, just return the dialog itself without a trigger\n  return dialog;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1622, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IAqTsB,yBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1635, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/leads/columns.tsx"],"sourcesContent":["'use client';\nimport { ColumnDef } from '@tanstack/react-table';\nimport Link from 'next/link';\nimport { ArrowUpDown, MoreHorizontal, User, Edit, Eye, Trash2 } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  DropdownMenuGroup,\n} from '@/components/ui/dropdown-menu';\nimport { StatusBadge } from '@/components/status-badge';\nimport type { Lead, LeadStatus } from '@/lib/types';\nimport { format, parseISO } from 'date-fns';\nimport { EditLeadDialog } from './[id]/edit-lead-dialog';\nimport { updateLeadStatusAction } from '@/lib/actions';\nimport { ALL_STATUSES } from '@/lib/types';\n\nfunction FormattedDate({ dateString }: { dateString: string }) {\n    const [formattedDate, setFormattedDate] = useState('');\n  \n    useEffect(() => {\n        if (dateString) {\n            setFormattedDate(format(parseISO(dateString), 'PPP'));\n        }\n    }, [dateString]);\n  \n    if (!formattedDate) {\n      return <div className=\"pl-4\">-</div>;\n    }\n  \n    return <div className=\"pl-4\">{formattedDate}</div>;\n}\n\n\nfunction LeadActions({ lead }: { lead: Lead }) {\n    const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  \n    const handleStatusUpdate = async (status: LeadStatus) => {\n      await updateLeadStatusAction(lead.id, status);\n    };\n  \n    return (\n      <div className=\"text-right\">\n        <EditLeadDialog lead={lead} open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen} />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n                <DropdownMenuItem asChild>\n                  <Link href={`/leads/${lead.id}`}>\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    View Details\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onSelect={() => setIsEditDialogOpen(true)}>\n                    <Edit className=\"mr-2 h-4 w-4\" />\n                    Edit Lead\n                </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuSub>\n              <DropdownMenuSubTrigger>Update Status</DropdownMenuSubTrigger>\n              <DropdownMenuSubContent>\n                {ALL_STATUSES.map((status) => (\n                  <DropdownMenuItem\n                    key={status}\n                    onClick={() => handleStatusUpdate(status)}\n                    disabled={lead.status === status}\n                  >\n                    {status}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuSubContent>\n            </DropdownMenuSub>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"text-destructive focus:bg-destructive/10 focus:text-destructive\">\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Delete Lead\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\nexport const columns: ColumnDef<Lead>[] = [\n  {\n    accessorKey: 'name',\n    header: 'Name',\n    cell: ({ row }) => {\n      const lead = row.original;\n      return (\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-muted text-muted-foreground\">\n            <User className=\"h-5 w-5\" />\n          </div>\n          <div className=\"grid gap-0.5\">\n            <Link href={`/leads/${lead.id}`} className=\"font-medium hover:underline\">{lead.name}</Link>\n            <span className=\"text-xs text-muted-foreground\">{lead.email}</span>\n          </div>\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: 'company',\n    header: 'Company',\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: ({ row }) => <StatusBadge status={row.original.status} />,\n  },\n  {\n    accessorKey: 'createdAt',\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n        >\n          Created At\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => {\n        const date = row.getValue('createdAt') as string;\n        return <FormattedDate dateString={date} />\n    }\n  },\n  {\n    id: 'actions',\n    cell: ({ row }) => <LeadActions lead={row.original} />,\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2009, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2037, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IA6BsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2050, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/leads/create-lead-dialog.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useForm, useFieldArray, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { PlusCircle, Trash2 } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n    TableFooter as UiTableFooter,\n  } from '@/components/ui/table';\nimport { createLead } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { ALL_STATUSES, Product, LeadSource } from '@/lib/types';\nimport { getProducts, getLeadSources } from '@/lib/data';\n\nconst leadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1, 'Quantity must be at least 1'),\n    rate: z.coerce.number().min(0, 'Rate must be a positive number'),\n    selectedSku: z.string().optional(),\n});\n\nconst leadSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  company: z.string().min(2, { message: 'Company must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  phone: z.string().min(10, { message: 'Please enter a valid phone number.' }),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(ALL_STATUSES),\n  source: z.string().min(1, { message: 'Please select a lead source.' }),\n  notes: z.string().optional(),\n  products: z.array(leadProductSchema).optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadSchema>;\n\nexport function CreateLeadDialog() {\n  const [open, setOpen] = useState(false);\n  const [availableProducts, setAvailableProducts] = useState<Product[]>([]);\n  const [leadSources, setLeadSources] = useState<LeadSource[]>([]);\n  const { toast } = useToast();\n\n  const { register, handleSubmit, reset, control, setValue, watch, formState: { errors, isSubmitting } } = useForm<LeadFormData>({\n    resolver: zodResolver(leadSchema),\n    defaultValues: {\n        status: 'New',\n        products: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'products',\n  });\n\n  const watchedProducts = watch('products');\n\n  const productTotals = watchedProducts?.map(p => {\n    const productDetails = availableProducts.find(ap => ap.id === p.productId);\n    if (!productDetails) return { amount: 0, gst: 0, total: 0 };\n    const amount = p.quantity * p.rate;\n    const gst = amount * (productDetails.gstRate / 100);\n    return { amount, gst, total: amount + gst };\n  }) || [];\n  \n  const grandTotal = productTotals.reduce((acc, curr) => acc + curr.total, 0);\n\n  useEffect(() => {\n    async function fetchData() {\n        if (open) {\n            const [fetchedProducts, fetchedLeadSources] = await Promise.all([\n                getProducts(),\n                getLeadSources(),\n            ]);\n            setAvailableProducts(fetchedProducts);\n            setLeadSources(fetchedLeadSources);\n        }\n    }\n    fetchData();\n  }, [open]);\n\n\n  const onSubmit = async (data: LeadFormData) => {\n    const formData = new FormData();\n    \n    Object.entries(data).forEach(([key, value]) => {\n        if (key === 'products') {\n            formData.append('products', JSON.stringify(value));\n        } else if (value) {\n            formData.append(key, value as string);\n        }\n    });\n\n    const result = await createLead(formData);\n\n    if (result.message === 'Successfully created lead.') {\n      toast({\n        title: 'Lead Created',\n        description: `Lead \"${data.name}\" has been successfully created.`,\n      });\n      reset();\n      setOpen(false);\n    } else {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: result.message,\n        });\n    }\n  };\n\n  const handleProductChange = (productId: string, index: number) => {\n    const product = availableProducts.find(p => p.id === productId);\n    if (product) {\n      setValue(`products.${index}.rate`, product.price, { shouldValidate: true });\n      setValue(`products.${index}.selectedSku`, undefined); // Reset SKU\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(isOpen) => {\n        setOpen(isOpen);\n        if (!isOpen) {\n            reset();\n        }\n    }}>\n      <DialogTrigger asChild>\n        <Button>\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\n            New Lead\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle>Create New Lead</DialogTitle>\n          <DialogDescription>\n            Fill in the details below to add a new lead to your pipeline.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid gap-4 py-4 max-h-[70vh] overflow-y-auto pr-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Name</Label>\n                        <Input id=\"name\" {...register('name')} className={errors.name ? 'border-destructive' : ''} />\n                        {errors.name && <p className=\"text-xs text-destructive mt-1\">{errors.name.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"company\">Company</Label>\n                        <Input id=\"company\" {...register('company')} className={errors.company ? 'border-destructive' : ''} />\n                        {errors.company && <p className=\"text-xs text-destructive mt-1\">{errors.company.message}</p>}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input id=\"email\" type=\"email\" {...register('email')} className={errors.email ? 'border-destructive' : ''} />\n                        {errors.email && <p className=\"text-xs text-destructive mt-1\">{errors.email.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone</Label>\n                        <Input id=\"phone\" {...register('phone')} className={errors.phone ? 'border-destructive' : ''} />\n                        {errors.phone && <p className=\"text-xs text-destructive mt-1\">{errors.phone.message}</p>}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"whatsappNumber\">WhatsApp Number</Label>\n                        <Input id=\"whatsappNumber\" {...register('whatsappNumber')} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"source\">Lead Source</Label>\n                        <Controller\n                            control={control}\n                            name=\"source\"\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <SelectTrigger id=\"source\" className={errors.source ? 'border-destructive' : ''}>\n                                        <SelectValue placeholder=\"Select a source\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        {leadSources.map(source => (\n                                            <SelectItem key={source.id} value={source.name}>{source.name}</SelectItem>\n                                        ))}\n                                    </SelectContent>\n                                </Select>\n                            )}\n                        />\n                        {errors.source && <p className=\"text-xs text-destructive mt-1\">{errors.source.message}</p>}\n                    </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                    <Label>Products Interested</Label>\n                    <div className=\"border rounded-lg\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-[25%]\">Product</TableHead>\n                                    <TableHead className=\"w-[15%]\">SKU</TableHead>\n                                    <TableHead>Qty</TableHead>\n                                    <TableHead>Rate (₹)</TableHead>\n                                    <TableHead>GST</TableHead>\n                                    <TableHead className=\"text-right\">Amount (₹)</TableHead>\n                                    <TableHead className=\"w-[50px]\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {fields.map((field, index) => {\n                                    const productDetails = availableProducts.find(p => p.id === watchedProducts?.[index]?.productId);\n                                    const { total } = productTotals[index] || { total: 0 };\n                                    \n                                    return (\n                                    <TableRow key={field.id}>\n                                        <TableCell>\n                                            <Controller\n                                                control={control}\n                                                name={`products.${index}.productId`}\n                                                render={({ field }) => (\n                                                    <Select onValueChange={(value) => {\n                                                        field.onChange(value);\n                                                        handleProductChange(value, index);\n                                                    }} defaultValue={field.value}>\n                                                        <SelectTrigger>\n                                                            <SelectValue placeholder=\"Select product\" />\n                                                        </SelectTrigger>\n                                                        <SelectContent>\n                                                            {availableProducts.map(p => (\n                                                                <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>\n                                                            ))}\n                                                        </SelectContent>\n                                                    </Select>\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                        {productDetails?.skus && productDetails.skus.length > 0 ? (\n                                            <Controller\n                                                control={control}\n                                                name={`products.${index}.selectedSku`}\n                                                render={({ field }) => (\n                                                    <Select onValueChange={field.onChange} value={field.value}>\n                                                        <SelectTrigger>\n                                                            <SelectValue placeholder=\"SKU\" />\n                                                        </SelectTrigger>\n                                                        <SelectContent>\n                                                            {productDetails.skus?.map(sku => (\n                                                                <SelectItem key={sku} value={sku}>{sku}</SelectItem>\n                                                            ))}\n                                                        </SelectContent>\n                                                    </Select>\n                                                )}\n                                            />\n                                            ) : (\n                                                <div className=\"text-xs text-muted-foreground\">N/A</div>\n                                            )}\n                                        </TableCell>\n                                        <TableCell>\n                                            <Input type=\"number\" {...register(`products.${index}.quantity`)} min=\"1\" className=\"w-20\" />\n                                        </TableCell>\n                                        <TableCell>\n                                            <Input type=\"number\" {...register(`products.${index}.rate`)} min=\"0\" className=\"w-24\" />\n                                        </TableCell>\n                                        <TableCell>{productDetails ? `${productDetails.gstRate}%` : '-'}</TableCell>\n                                        <TableCell className=\"text-right font-medium\">{total.toFixed(2)}</TableCell>\n                                        <TableCell>\n                                            <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => remove(index)}>\n                                                <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                )})}\n                                {fields.length === 0 && (\n                                    <TableRow>\n                                        <TableCell colSpan={7} className=\"text-center text-muted-foreground h-24\">\n                                            No products added.\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                            <UiTableFooter>\n                                <TableRow>\n                                    <TableCell colSpan={5} className=\"text-right font-bold\">Grand Total (₹)</TableCell>\n                                    <TableCell className=\"text-right font-bold\">{grandTotal.toFixed(2)}</TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n                            </UiTableFooter>\n                        </Table>\n                    </div>\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => append({ productId: '', quantity: 1, rate: 0, selectedSku: '' })}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Product\n                    </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">Initial Notes</Label>\n                    <Textarea id=\"notes\" placeholder=\"Initial notes about the lead...\" {...register('notes')} />\n                </div>\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Initial Status</Label>\n                     <Controller\n                        control={control}\n                        name=\"status\"\n                        render={({ field }) => (\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <SelectTrigger className=\"w-[180px]\">\n                                    <SelectValue placeholder=\"Set initial status\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {ALL_STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}\n                                </SelectContent>\n                            </Select>\n                        )}\n                    />\n                </div>\n            </div>\n            <DialogFooter className=\"pt-4 border-t\">\n                <Button type=\"submit\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Creating...' : 'Create Lead'}\n                </Button>\n            </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3037, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/leads/data-table.tsx"],"sourcesContent":["\n'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  getFilteredRowModel,\n} from '@tanstack/react-table';\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n  } from \"@/components/ui/select\"\nimport { CreateLeadDialog } from './create-lead-dialog';\nimport { ALL_STATUSES, Lead } from '@/lib/types';\nimport { Search, Download } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData extends Lead, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [globalFilter, setGlobalFilter] = React.useState(searchParams.get('q') || '');\n  const [columnFilters, setColumnFilters] = React.useState([\n    {\n        id: 'status',\n        value: searchParams.get('status') || '',\n    }\n  ]);\n\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onGlobalFilterChange: setGlobalFilter,\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    state: {\n      sorting,\n      globalFilter,\n      columnFilters,\n    },\n  });\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setGlobalFilter(value);\n    const params = new URLSearchParams(searchParams);\n    if (value) {\n      params.set('q', value);\n    } else {\n      params.delete('q');\n    }\n    router.replace(`${pathname}?${params.toString()}`);\n  };\n\n  const handleStatusFilter = (status: string) => {\n    const value = status === 'all' ? '' : status;\n    table.getColumn('status')?.setFilterValue(value);\n\n    const params = new URLSearchParams(searchParams);\n    if (value) {\n      params.set('status', value);\n    } else {\n      params.delete('status');\n    }\n    router.replace(`${pathname}?${params.toString()}`);\n  };\n\n  const handleExport = () => {\n    const headers = [\n      'ID', 'Name', 'Company', 'Email', 'Phone', 'WhatsApp',\n      'Status', 'Source', 'Created At', 'Interested Products'\n    ];\n\n    const escapeCsvCell = (cell: string) => {\n        if (cell.includes(',') || cell.includes('\"') || cell.includes('\\n')) {\n            return `\"${cell.replace(/\"/g, '\"\"')}\"`;\n        }\n        return cell;\n    };\n\n    const rows = data.map(lead => {\n        const productsString = (lead.products || [])\n            .map(p => `${p.productId} (Qty: ${p.quantity}, SKU: ${p.selectedSku || 'N/A'})`)\n            .join('; ');\n        \n        return [\n            lead.id,\n            lead.name,\n            lead.company,\n            lead.email,\n            lead.phone,\n            lead.whatsappNumber || '',\n            lead.status,\n            lead.source,\n            format(new Date(lead.createdAt), 'yyyy-MM-dd HH:mm:ss'),\n            productsString,\n        ].map(escapeCsvCell).join(',');\n    });\n\n    const csvContent = [headers.join(','), ...rows].join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'leads.csv');\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div>\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 py-4\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-2 w-full sm:w-auto\">\n                <div className=\"relative w-full sm:w-auto\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                        placeholder=\"Search leads...\"\n                        value={globalFilter}\n                        onChange={handleSearch}\n                        className=\"pl-10 max-w-sm w-full\"\n                    />\n                </div>\n                <Select onValueChange={handleStatusFilter} value={searchParams.get('status') || 'all'}>\n                    <SelectTrigger className=\"w-full sm:w-[180px]\">\n                        <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        {ALL_STATUSES.map(status => (\n                            <SelectItem key={status} value={status}>{status}</SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n            </div>\n            <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n                <Button variant=\"outline\" onClick={handleExport} className=\"w-full sm:w-auto\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export\n                </Button>\n                <CreateLeadDialog />\n            </div>\n        </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}