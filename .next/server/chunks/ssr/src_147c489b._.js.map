{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, deleteLead as dbDeleteLead, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IA0LsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/products/add-product-sheet.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { PlusCircle, Trash2, X } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { addProduct } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\n\nconst productSchema = z.object({\n  name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n  description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n  price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n  gstRate: z.coerce.number().min(0, { message: 'GST rate must be a positive number.' }).max(100, { message: 'GST rate cannot exceed 100.' }),\n  skus: z.array(z.object({ value: z.string().min(1, \"SKU cannot be empty.\") })).optional(),\n  catalogueUrl: z.string().url({ message: 'Please enter a valid URL.' }).optional().or(z.literal('')),\n});\n\ntype ProductFormData = z.infer<typeof productSchema>;\n\nexport function AddProductSheet() {\n  const [open, setOpen] = useState(false);\n  const [currentSku, setCurrentSku] = useState('');\n  const { toast } = useToast();\n  const { register, handleSubmit, reset, control, formState: { errors, isSubmitting } } = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      skus: [],\n    },\n  });\n  \n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"skus\"\n  });\n\n  const handleAddSku = () => {\n    if (currentSku.trim() !== '') {\n      append({ value: currentSku.trim() });\n      setCurrentSku('');\n    }\n  };\n\n\n  const onSubmit = async (data: ProductFormData) => {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (key === 'skus') {\n        formData.append(key, JSON.stringify((value as {value: string}[]).map(s => s.value)));\n      } else if (value) {\n        formData.append(key, String(value));\n      }\n    });\n\n    const result = await addProduct(formData);\n\n    if (result.message === 'Successfully added product.') {\n      toast({\n        title: 'Product Added',\n        description: `\"${data.name}\" has been successfully added.`,\n      });\n      reset();\n      setOpen(false);\n    } else {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: result.message,\n        });\n    }\n  };\n\n  return (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button>\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Add Product\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"sm:max-w-xl\">\n        <SheetHeader>\n          <SheetTitle>Add a New Product</SheetTitle>\n          <SheetDescription>\n            Fill in the details below to add a new product or service.\n          </SheetDescription>\n        </SheetHeader>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4 py-6 max-h-[90vh] overflow-y-auto pr-6\">\n          <div>\n            <Label htmlFor=\"name\">Product Name</Label>\n            <Input id=\"name\" {...register('name')} className={errors.name ? 'border-destructive' : ''} />\n            {errors.name && <p className=\"text-xs text-destructive mt-1\">{errors.name.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" {...register('description')} className={errors.description ? 'border-destructive' : ''} />\n            {errors.description && <p className=\"text-xs text-destructive mt-1\">{errors.description.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n                <Label htmlFor=\"price\">Price (₹)</Label>\n                <Input id=\"price\" type=\"number\" step=\"0.01\" {...register('price')} className={errors.price ? 'border-destructive' : ''} />\n                {errors.price && <p className=\"text-xs text-destructive mt-1\">{errors.price.message}</p>}\n            </div>\n            <div>\n                <Label htmlFor=\"gstRate\">GST Rate (%)</Label>\n                <Input id=\"gstRate\" type=\"number\" step=\"0.01\" {...register('gstRate')} className={errors.gstRate ? 'border-destructive' : ''} />\n                {errors.gstRate && <p className=\"text-xs text-destructive mt-1\">{errors.gstRate.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"catalogueUrl\">Catalogue URL</Label>\n            <Input id=\"catalogueUrl\" placeholder=\"https://example.com/catalogue.pdf\" {...register('catalogueUrl')} className={errors.catalogueUrl ? 'border-destructive' : ''} />\n            {errors.catalogueUrl && <p className=\"text-xs text-destructive mt-1\">{errors.catalogueUrl.message}</p>}\n          </div>\n          <div className=\"space-y-2\">\n            <Label>SKUs</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                value={currentSku}\n                onChange={(e) => setCurrentSku(e.target.value)}\n                placeholder=\"Enter SKU and press Add\"\n              />\n              <Button type=\"button\" variant=\"outline\" onClick={handleAddSku}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2 pt-2\">\n              {fields.map((field, index) => (\n                <Badge key={field.id} variant=\"secondary\">\n                  {field.value}\n                  <button\n                    type=\"button\"\n                    className=\"ml-2 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onClick={() => remove(index)}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n            {errors.skus && <p className=\"text-xs text-destructive mt-1\">{errors.skus.message}</p>}\n          </div>\n          <SheetFooter className=\"pt-4 sticky bottom-0 bg-background\">\n            <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\">\n              {isSubmitting ? 'Adding Product...' : 'Add Product'}\n            </Button>\n          </SheetFooter>\n        </form>\n      </SheetContent>\n    </Sheet>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 615, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, deleteLead as dbDeleteLead, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IAyNsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/products/edit-product-sheet.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { PlusCircle, Trash2, X } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { updateProduct } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\nimport { Product } from '@/lib/types';\n\nconst productSchema = z.object({\n  name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n  description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n  price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n  gstRate: z.coerce.number().min(0, { message: 'GST rate must be a positive number.' }).max(100, { message: 'GST rate cannot exceed 100.' }),\n  skus: z.array(z.object({ value: z.string().min(1, \"SKU cannot be empty.\") })).optional(),\n  catalogueUrl: z.string().url({ message: 'Please enter a valid URL.' }).optional().or(z.literal('')),\n});\n\ntype ProductFormData = z.infer<typeof productSchema>;\n\ntype EditProductSheetProps = {\n  product: Product;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport function EditProductSheet({ product, open, onOpenChange }: EditProductSheetProps) {\n  const [currentSku, setCurrentSku] = useState('');\n  const { toast } = useToast();\n  const { register, handleSubmit, reset, control, formState: { errors, isSubmitting } } = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n  });\n  \n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"skus\"\n  });\n\n  useEffect(() => {\n    if (open) {\n      reset({\n        ...product,\n        skus: product.skus?.map(sku => ({ value: sku })) || [],\n      });\n    }\n  }, [product, open, reset]);\n\n  const handleAddSku = () => {\n    if (currentSku.trim() !== '') {\n      append({ value: currentSku.trim() });\n      setCurrentSku('');\n    }\n  };\n\n  const onSubmit = async (data: ProductFormData) => {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (key === 'skus') {\n        formData.append(key, JSON.stringify((value as {value: string}[]).map(s => s.value)));\n      } else if (value !== undefined && value !== null) {\n        formData.append(key, String(value));\n      }\n    });\n\n    const result = await updateProduct(product.id, formData);\n\n    if (result.message === 'Successfully updated product.') {\n      toast({\n        title: 'Product Updated',\n        description: `\"${data.name}\" has been successfully updated.`,\n      });\n      onOpenChange(false);\n    } else {\n        toast({\n            variant: 'destructive',\n            title: 'Error',\n            description: result.message,\n        });\n    }\n  };\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent className=\"sm:max-w-xl\">\n        <SheetHeader>\n          <SheetTitle>Edit Product</SheetTitle>\n          <SheetDescription>\n            Update the details for this product or service.\n          </SheetDescription>\n        </SheetHeader>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4 py-6 max-h-[90vh] overflow-y-auto pr-6\">\n          <div>\n            <Label htmlFor=\"name\">Product Name</Label>\n            <Input id=\"name\" {...register('name')} className={errors.name ? 'border-destructive' : ''} />\n            {errors.name && <p className=\"text-xs text-destructive mt-1\">{errors.name.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" {...register('description')} className={errors.description ? 'border-destructive' : ''} />\n            {errors.description && <p className=\"text-xs text-destructive mt-1\">{errors.description.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n                <Label htmlFor=\"price\">Price (₹)</Label>\n                <Input id=\"price\" type=\"number\" step=\"0.01\" {...register('price')} className={errors.price ? 'border-destructive' : ''} />\n                {errors.price && <p className=\"text-xs text-destructive mt-1\">{errors.price.message}</p>}\n            </div>\n            <div>\n                <Label htmlFor=\"gstRate\">GST Rate (%)</Label>\n                <Input id=\"gstRate\" type=\"number\" step=\"0.01\" {...register('gstRate')} className={errors.gstRate ? 'border-destructive' : ''} />\n                {errors.gstRate && <p className=\"text-xs text-destructive mt-1\">{errors.gstRate.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"catalogueUrl\">Catalogue URL</Label>\n            <Input id=\"catalogueUrl\" placeholder=\"https://example.com/catalogue.pdf\" {...register('catalogueUrl')} className={errors.catalogueUrl ? 'border-destructive' : ''} />\n            {errors.catalogueUrl && <p className=\"text-xs text-destructive mt-1\">{errors.catalogueUrl.message}</p>}\n          </div>\n          <div className=\"space-y-2\">\n            <Label>SKUs</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                value={currentSku}\n                onChange={(e) => setCurrentSku(e.target.value)}\n                placeholder=\"Enter SKU and press Add\"\n              />\n              <Button type=\"button\" variant=\"outline\" onClick={handleAddSku}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2 pt-2\">\n              {fields.map((field, index) => (\n                <Badge key={field.id} variant=\"secondary\">\n                  {field.value}\n                  <button\n                    type=\"button\"\n                    className=\"ml-2 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onClick={() => remove(index)}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n            {errors.skus && <p className=\"text-xs text-destructive mt-1\">{errors.skus.message}</p>}\n          </div>\n          <SheetFooter className=\"pt-4 sticky bottom-0 bg-background\">\n            <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\">\n              {isSubmitting ? 'Saving Changes...' : 'Save Changes'}\n            </Button>\n          </SheetFooter>\n        </form>\n      </SheetContent>\n    </Sheet>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1075, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1202, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, deleteLead as dbDeleteLead, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":";;;;;;IAwPwB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1215, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/products/delete-product-dialog.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { deleteProduct } from '@/lib/actions';\nimport { Product } from '@/lib/types';\n\ntype DeleteProductDialogProps = {\n  product: Product;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nexport function DeleteProductDialog({ product, open, onOpenChange }: DeleteProductDialogProps) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const { toast } = useToast();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    const result = await deleteProduct(product.id);\n    if (result.message === 'Successfully deleted product.') {\n      toast({\n        title: 'Product Deleted',\n        description: `\"${product.name}\" has been deleted.`,\n      });\n      onOpenChange(false);\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message,\n      });\n    }\n    setIsDeleting(false);\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the product\n            <span className=\"font-semibold\"> {product.name}</span>.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button\n              variant=\"destructive\"\n              onClick={handleDelete}\n              disabled={isDeleting}\n            >\n              {isDeleting ? 'Deleting...' : 'Delete'}\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAUA;AACA;AACA;AAfA;;;;;;;AAwBO,SAAS,oBAAoB,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAA4B;IAC3F,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,eAAe;QACnB,cAAc;QACd,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,gBAAa,AAAD,EAAE,QAAQ,EAAE;QAC7C,IAAI,OAAO,OAAO,KAAK,iCAAiC;YACtD,MAAM;gBACJ,OAAO;gBACP,aAAa,CAAC,CAAC,EAAE,QAAQ,IAAI,CAAC,mBAAmB,CAAC;YACpD;YACA,aAAa;QACf,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,OAAO;YAC7B;QACF;QACA,cAAc;IAChB;IAEA,qBACE,8OAAC,2IAAA,CAAA,cAAW;QAAC,MAAM;QAAM,cAAc;kBACrC,cAAA,8OAAC,2IAAA,CAAA,qBAAkB;;8BACjB,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,mBAAgB;sCAAC;;;;;;sCAClB,8OAAC,2IAAA,CAAA,yBAAsB;;gCAAC;8CAEtB,8OAAC;oCAAK,WAAU;;wCAAgB;wCAAE,QAAQ,IAAI;;;;;;;gCAAQ;;;;;;;;;;;;;8BAG1D,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAY;;;;;;sCACzC,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAQ;gCACR,SAAS;gCACT,UAAU;0CAET,aAAa,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO5C","debugId":null}},
    {"offset": {"line": 1344, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/products/product-actions.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { MoreHorizontal, Edit, Trash2, Eye } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Product } from '@/lib/types';\nimport { EditProductSheet } from './edit-product-sheet';\nimport { DeleteProductDialog } from './delete-product-dialog';\n\nexport function ProductActions({ product }: { product: Product }) {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  return (\n    <>\n      <EditProductSheet product={product} open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen} />\n      <DeleteProductDialog product={product} open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen} />\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onSelect={() => setIsEditDialogOpen(true)}>\n            <Eye className=\"mr-2 h-4 w-4\" />\n            View\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={() => setIsEditDialogOpen(true)}>\n            <Edit className=\"mr-2 h-4 w-4\" />\n            Edit\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onSelect={() => setIsDeleteDialogOpen(true)}\n            className=\"text-destructive focus:bg-destructive/10 focus:text-destructive\"\n          >\n            <Trash2 className=\"mr-2 h-4 w-4\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AAfA;;;;;;;;AAiBO,SAAS,eAAe,EAAE,OAAO,EAAwB;IAC9D,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7D,qBACE;;0BACE,8OAAC,mJAAA,CAAA,mBAAgB;gBAAC,SAAS;gBAAS,MAAM;gBAAkB,cAAc;;;;;;0BAC1E,8OAAC,sJAAA,CAAA,sBAAmB;gBAAC,SAAS;gBAAS,MAAM;gBAAoB,cAAc;;;;;;0BAC/E,8OAAC,4IAAA,CAAA,eAAY;;kCACX,8OAAC,4IAAA,CAAA,sBAAmB;wBAAC,OAAO;kCAC1B,cAAA,8OAAC,kIAAA,CAAA,SAAM;4BAAC,SAAQ;4BAAQ,WAAU;;8CAChC,8OAAC;oCAAK,WAAU;8CAAU;;;;;;8CAC1B,8OAAC,gNAAA,CAAA,iBAAc;oCAAC,WAAU;;;;;;;;;;;;;;;;;kCAG9B,8OAAC,4IAAA,CAAA,sBAAmB;wBAAC,OAAM;;0CACzB,8OAAC,4IAAA,CAAA,oBAAiB;0CAAC;;;;;;0CACnB,8OAAC,4IAAA,CAAA,wBAAqB;;;;;0CACtB,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU,IAAM,oBAAoB;;kDACpD,8OAAC,gMAAA,CAAA,MAAG;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAGlC,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU,IAAM,oBAAoB;;kDACpD,8OAAC,2MAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAGnC,8OAAC,4IAAA,CAAA,mBAAgB;gCACf,UAAU,IAAM,sBAAsB;gCACtC,WAAU;;kDAEV,8OAAC,0MAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;;;;;;;;;AAO/C","debugId":null}}]
}