{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/ai/flows/summarize-meeting-notes.ts"],"sourcesContent":["// Summarize Meeting Notes Flow\n'use server';\n/**\n * @fileOverview Summarizes lengthy meeting notes into concise summaries using GenAI.\n *\n * - summarizeMeetingNotes - A function that handles the summarization of meeting notes.\n * - SummarizeMeetingNotesInput - The input type for the summarizeMeetingNotes function.\n * - SummarizeMeetingNotesOutput - The return type for the summarizeMeetingNotes function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SummarizeMeetingNotesInputSchema = z.object({\n  notes: z\n    .string()\n    .describe('The lengthy meeting notes to be summarized.'),\n});\nexport type SummarizeMeetingNotesInput = z.infer<typeof SummarizeMeetingNotesInputSchema>;\n\nconst SummarizeMeetingNotesOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the meeting notes.'),\n});\nexport type SummarizeMeetingNotesOutput = z.infer<typeof SummarizeMeetingNotesOutputSchema>;\n\nexport async function summarizeMeetingNotes(input: SummarizeMeetingNotesInput): Promise<SummarizeMeetingNotesOutput> {\n  return summarizeMeetingNotesFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizeMeetingNotesPrompt',\n  input: {schema: SummarizeMeetingNotesInputSchema},\n  output: {schema: SummarizeMeetingNotesOutputSchema},\n  prompt: `Summarize the following meeting notes into a concise summary:\n\n  {{{notes}}}`,\n});\n\nconst summarizeMeetingNotesFlow = ai.defineFlow(\n  {\n    name: 'summarizeMeetingNotesFlow',\n    inputSchema: SummarizeMeetingNotesInputSchema,\n    outputSchema: SummarizeMeetingNotesOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;AAE/B;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,OAAO,uIAAA,CAAA,IAAC,CACL,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;aAEE,CAAC;AACd;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/data/index.ts"],"sourcesContent":["// Firestore-based data service - replaces JSON file operations\n// Original JSON-based service backed up as index-json-backup.ts\n\nexport * from '../firestore-data-service';\n"],"names":[],"mappings":"AAAA,+DAA+D;AAC/D,gEAAgE","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { summarizeMeetingNotes } from '@/ai/flows/summarize-meeting-notes';\nimport { addLead as dbAddLead, addActivityToLead, updateLeadStatus as updateStatus, addProduct as dbAddProduct, addLeadSource as dbAddLeadSource, deleteLeadSource as dbDeleteLeadSource, updateLead as dbUpdateLead, getLeadById as dbGetLeadById, addQuotation as dbAddQuotation, addQuotationTemplate as dbAddQuotationTemplate, updateProduct as dbUpdateProduct, deleteProduct as dbDeleteProduct, addEmployee as dbAddEmployee, getEmployeeRoles, addEmployeeRole as dbAddEmployeeRole, deleteEmployeeRole as dbDeleteEmployeeRole, getDepartments, addDepartment as dbAddDepartment, deleteDepartment as dbDeleteDepartment, updateQuotationTemplate as dbUpdateQuotationTemplate, deleteQuotationTemplate as dbDeleteQuotationTemplate } from './data';\nimport type { Lead, LeadStatus, LeadProduct, UpdatableLeadData, Product, NewQuotationTemplate, Quotation, NewEmployee, Employee, QuotationTemplate } from './types';\nimport { getProducts } from './data';\n\nconst LeadProductSchema = z.object({\n    productId: z.string().min(1, 'Product must be selected'),\n    quantity: z.coerce.number().min(1),\n    rate: z.coerce.number().min(0),\n    selectedSku: z.string().optional(),\n});\n\nconst CreateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  notes: z.string().optional(),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nexport async function createLead(formData: FormData) {\n  const productsJSON = formData.get('products');\n  const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n\n  const validatedFields = CreateLeadSchema.safeParse({\n    name: formData.get('name'),\n    company: formData.get('company'),\n    email: formData.get('email'),\n    phone: formData.get('phone'),\n    whatsappNumber: formData.get('whatsappNumber'),\n    status: formData.get('status'),\n    source: formData.get('source'),\n    notes: formData.get('notes'),\n    products: products,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to create lead.',\n    };\n  }\n  \n  let newLeadId: string | undefined;\n  try {\n    const newLead = await dbAddLead(validatedFields.data);\n    newLeadId = newLead.id;\n  } catch (error) {\n    return { message: 'Database Error: Failed to Create Lead.' };\n  }\n\n  revalidatePath('/leads');\n  revalidatePath('/');\n  if (newLeadId) {\n    revalidatePath(`/leads/${newLeadId}`);\n  }\n  return { message: 'Successfully created lead.' };\n}\n\nconst UpdateLeadSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  company: z.string().min(2, 'Company must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10, 'Phone number seems too short'),\n  whatsappNumber: z.string().optional(),\n  status: z.enum(['New', 'In Discussion', 'Negotiation', 'Closed - Won', 'Closed - Lost']),\n  source: z.string().min(1, 'Please select a lead source'),\n  products: z.array(LeadProductSchema).optional(),\n});\n\nfunction generateChangeNotes(oldLead: Lead, newLeadData: UpdatableLeadData, allProducts: Product[]): string {\n    const changes: string[] = [];\n\n    if (oldLead.name !== newLeadData.name) {\n        changes.push(`Name changed from \"${oldLead.name}\" to \"${newLeadData.name}\".`);\n    }\n    if (oldLead.company !== newLeadData.company) {\n        changes.push(`Company changed from \"${oldLead.company}\" to \"${newLeadData.company}\".`);\n    }\n    if (oldLead.email !== newLeadData.email) {\n        changes.push(`Email changed from \"${oldLead.email}\" to \"${newLeadData.email}\".`);\n    }\n    if (oldLead.phone !== newLeadData.phone) {\n        changes.push(`Phone changed from \"${oldLead.phone}\" to \"${newLeadData.phone}\".`);\n    }\n    if (oldLead.whatsappNumber !== newLeadData.whatsappNumber) {\n        changes.push(`WhatsApp Number changed from \"${oldLead.whatsappNumber || 'N/A'}\" to \"${newLeadData.whatsappNumber || 'N/A'}\".`);\n    }\n    if (oldLead.status !== newLeadData.status) {\n        changes.push(`Status changed from \"${oldLead.status}\" to \"${newLeadData.status}\".`);\n    }\n    if (oldLead.source !== newLeadData.source) {\n        changes.push(`Source changed from \"${oldLead.source}\" to \"${newLeadData.source}\".`);\n    }\n\n    const oldProducts = oldLead.products || [];\n    const newProducts = newLeadData.products || [];\n    if (JSON.stringify(oldProducts) !== JSON.stringify(newProducts)) {\n        const getProductName = (productId: string) => allProducts.find(p => p.id === productId)?.name || productId;\n        \n        const formatProduct = (p: LeadProduct) => `${getProductName(p.productId)} (Qty: ${p.quantity}, Rate: ${p.rate}, SKU: ${p.selectedSku || 'N/A'})`;\n\n        const oldProductStr = oldProducts.map(formatProduct).join(', ') || 'None';\n        const newProductStr = newProducts.map(formatProduct).join(', ') || 'None';\n\n        changes.push(`Interested products updated.\\n- Old: ${oldProductStr}\\n- New: ${newProductStr}`);\n    }\n\n    if (changes.length === 0) {\n        return 'No changes were made to the lead details.';\n    }\n\n    return 'Lead details were updated:\\n' + changes.map(c => `- ${c}`).join('\\n');\n}\n\nexport async function updateLead(leadId: string, formData: FormData) {\n    const [oldLead, allProducts] = await Promise.all([\n        dbGetLeadById(leadId),\n        getProducts()\n    ]);\n\n    if (!oldLead) {\n        return { message: 'Error: Lead not found.' };\n    }\n\n    const productsJSON = formData.get('products');\n    const products = productsJSON ? JSON.parse(productsJSON as string) : [];\n  \n    const validatedFields = UpdateLeadSchema.safeParse({\n      name: formData.get('name'),\n      company: formData.get('company'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      whatsappNumber: formData.get('whatsappNumber'),\n      status: formData.get('status'),\n      source: formData.get('source'),\n      products: products,\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update lead.',\n      };\n    }\n\n    const newLeadData = validatedFields.data as UpdatableLeadData;\n    const changeNotes = generateChangeNotes(oldLead, newLeadData, allProducts);\n  \n    try {\n        await dbUpdateLead(leadId, newLeadData);\n        if (changeNotes !== 'No changes were made to the lead details.') {\n            await addActivityToLead(leadId, {\n                type: 'Revision Request',\n                notes: changeNotes\n            });\n        }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'An unknown error occurred';\n      return { message: `Database Error: Failed to Update Lead. ${message}` };\n    }\n  \n    revalidatePath('/leads');\n    revalidatePath('/');\n    revalidatePath(`/leads/${leadId}`);\n    return { message: 'Successfully updated lead.' };\n}\n\nconst ProductSchema = z.object({\n    name: z.string().min(3, { message: 'Product name must be at least 3 characters.' }),\n    description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),\n    price: z.coerce.number().min(0, { message: 'Price must be a positive number.' }),\n    gstRate: z.coerce.number().min(0).max(100),\n    skus: z.array(z.string()).optional(),\n    catalogueUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\nexport async function addProduct(formData: FormData) {\n  const skusJSON = formData.get('skus');\n  const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n  \n  const validatedFields = ProductSchema.safeParse({\n    name: formData.get('name'),\n    description: formData.get('description'),\n    price: formData.get('price'),\n    gstRate: formData.get('gstRate'),\n    skus: skus,\n    catalogueUrl: formData.get('catalogueUrl'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Failed to add product.',\n    };\n  }\n\n  try {\n    await dbAddProduct(validatedFields.data);\n  } catch (error) {\n    return { message: 'Database Error: Failed to add product.' };\n  }\n\n  revalidatePath('/products');\n  revalidatePath('/leads'); // Revalidate leads in case product info is needed\n  return { message: 'Successfully added product.' };\n}\n\nexport async function updateProduct(id: string, formData: FormData) {\n    const skusJSON = formData.get('skus');\n    const skus = skusJSON ? JSON.parse(skusJSON as string) : [];\n    \n    const validatedFields = ProductSchema.safeParse({\n      name: formData.get('name'),\n      description: formData.get('description'),\n      price: formData.get('price'),\n      gstRate: formData.get('gstRate'),\n      skus: skus,\n      catalogueUrl: formData.get('catalogueUrl'),\n    });\n  \n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: 'Failed to update product.',\n      };\n    }\n  \n    try {\n      await dbUpdateProduct(id, validatedFields.data);\n    } catch (error) {\n      return { message: 'Database Error: Failed to update product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads'); \n    return { message: 'Successfully updated product.' };\n  }\n  \n  export async function deleteProduct(id: string) {\n    try {\n      await dbDeleteProduct(id);\n    } catch (error) {\n      return { message: 'Database Error: Failed to delete product.' };\n    }\n  \n    revalidatePath('/products');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted product.' };\n  }\n\n\nconst LogActivitySchema = z.object({\n    leadId: z.string(),\n    type: z.enum(['Meeting', 'Call', 'Email', 'Revision Request', 'Proposal Sent']),\n    notes: z.string().min(10, 'Notes must be at least 10 characters long.'),\n    summary: z.string().optional(),\n});\n\nexport async function logActivity(formData: FormData) {\n    const validatedFields = LogActivitySchema.safeParse({\n        leadId: formData.get('leadId'),\n        type: formData.get('type'),\n        notes: formData.get('notes'),\n        summary: formData.get('summary') || undefined,\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to log activity.',\n        };\n    }\n\n    try {\n        const { leadId, ...activityData } = validatedFields.data;\n        await addActivityToLead(leadId, activityData);\n    } catch (error) {\n        return { message: 'Database Error: Failed to log activity.' };\n    }\n\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    revalidatePath('/');\n    return { message: 'Successfully logged activity.' };\n}\n\nexport async function getSummaryForNotes(notes: string): Promise<{ summary?: string; error?: string }> {\n  if (!notes || notes.trim().length < 50) {\n    return { error: 'Please provide at least 50 characters of notes to summarize.' };\n  }\n  try {\n    const result = await summarizeMeetingNotes({ notes });\n    return result;\n  } catch (e) {\n    console.error('AI Summarization Error:', e);\n    return { error: 'Failed to generate summary due to an internal error.' };\n  }\n}\n\n\nexport async function updateLeadStatusAction(leadId: string, status: LeadStatus) {\n  try {\n    await updateStatus(leadId, status);\n  } catch (error) {\n    return { message: 'Database Error: Failed to update status.' };\n  }\n  revalidatePath(`/leads/${leadId}`);\n  revalidatePath('/leads');\n  revalidatePath('/');\n  return { message: 'Status updated.' };\n}\n\nconst AddLeadSourceSchema = z.object({\n    name: z.string().min(2, 'Source name must be at least 2 characters'),\n});\n\nexport async function addLeadSourceAction(formData: FormData) {\n    const validatedFields = AddLeadSourceSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddLeadSource(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: `Successfully added '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteLeadSourceAction(id: string) {\n    try {\n        await dbDeleteLeadSource(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete lead source.' };\n    }\n\n    revalidatePath('/setup');\n    revalidatePath('/leads');\n    return { message: 'Successfully deleted lead source.' };\n}\n\nconst CreateQuotationSchema = z.object({\n  leadId: z.string().min(1),\n  templateId: z.string().min(1),\n  date: z.string(),\n  validUntil: z.string(),\n  status: z.enum(['Draft', 'Sent', 'Accepted', 'Rejected']),\n  products: z.string(), // JSON string\n  subTotal: z.coerce.number(),\n  totalGst: z.coerce.number(),\n  grandTotal: z.coerce.number(),\n  // Overridable template fields\n  companyName: z.string().min(1),\n  companyAddress: z.string().min(1),\n  companyGst: z.string().min(1),\n  termsAndConditions: z.string(),\n  logoUrl: z.string().optional(),\n});\n\n\nexport async function addQuotation(formData: FormData) {\n    const validatedFields = CreateQuotationSchema.safeParse({\n        leadId: formData.get('leadId'),\n        templateId: formData.get('templateId'),\n        date: formData.get('date'),\n        validUntil: formData.get('validUntil'),\n        status: formData.get('status'),\n        products: formData.get('products'),\n        subTotal: formData.get('subTotal'),\n        totalGst: formData.get('totalGst'),\n        grandTotal: formData.get('grandTotal'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n      });\n    \n      if (!validatedFields.success) {\n        console.error(validatedFields.error.flatten().fieldErrors);\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Validation Error: Failed to create quotation.',\n        };\n      }\n      \n      let newQuotation: Quotation | undefined;\n      try {\n        const data = validatedFields.data;\n        const parsedProducts = JSON.parse(data.products);\n        newQuotation = await dbAddQuotation({\n            ...data,\n            logoUrl: data.logoUrl || undefined,\n            products: parsedProducts,\n        });\n\n        // Log activity on the lead\n        await addActivityToLead(data.leadId, {\n            type: 'Proposal Sent',\n            notes: `Quotation ${newQuotation.quotationNumber} was created and sent.`\n        });\n\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return { message: `Database Error: Failed to Create Quotation. ${message}` };\n      }\n\n    revalidatePath('/quotations');\n    revalidatePath(`/leads/${validatedFields.data.leadId}`);\n    return { message: 'Successfully created quotation.' };\n}\n\n\nconst QuotationTemplateSchema = z.object({\n    name: z.string().min(3, 'Template name must be at least 3 characters.'),\n    companyName: z.string().min(3, 'Company name is required.'),\n    companyAddress: z.string().min(10, 'Full company address is required.'),\n    companyGst: z.string().min(15, 'A valid GSTIN is required.').max(15),\n    termsAndConditions: z.string().min(20, 'Terms and conditions are required.'),\n    logoUrl: z.string().url('Please enter a valid URL for the logo.').optional().or(z.literal('')),\n});\n\nexport async function addQuotationTemplateAction(formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to create template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbAddQuotationTemplate(validatedFields.data as NewQuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to create template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully created quotation template.' };\n}\n\nexport async function updateQuotationTemplateAction(id: string, formData: FormData) {\n    const validatedFields = QuotationTemplateSchema.safeParse({\n        name: formData.get('name'),\n        companyName: formData.get('companyName'),\n        companyAddress: formData.get('companyAddress'),\n        companyGst: formData.get('companyGst'),\n        termsAndConditions: formData.get('termsAndConditions'),\n        logoUrl: formData.get('logoUrl'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to update template. Please check the fields.',\n        };\n    }\n\n    try {\n        await dbUpdateQuotationTemplate(id, validatedFields.data as QuotationTemplate);\n    } catch (error) {\n        return { message: 'Database Error: Failed to update template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully updated quotation template.' };\n}\n\nexport async function deleteQuotationTemplateAction(id: string) {\n    try {\n        await dbDeleteQuotationTemplate(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete template.' };\n    }\n\n    revalidatePath('/setup/quotation-templates');\n    return { message: 'Successfully deleted quotation template.' };\n}\n\n\nconst AddEmployeeSchema = z.object({\n    name: z.string().min(2, 'Name must be at least 2 characters.'),\n    email: z.string().email('Please enter a valid email.'),\n    phone: z.string().min(10, 'Please enter a valid phone number.'),\n    role: z.string({\n      required_error: \"You need to select a role.\",\n    }),\n    department: z.string({\n        required_error: \"You need to select a department.\",\n    }),\n    address: z.string().min(10, 'Address is required.'),\n});\n\nexport async function addEmployeeAction(formData: FormData) {\n    const validatedFields = AddEmployeeSchema.safeParse({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        phone: formData.get('phone'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        address: formData.get('address'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: 'Failed to add employee.',\n        };\n    }\n\n    const [employeeRoles, departments] = await Promise.all([\n        getEmployeeRoles(),\n        getDepartments(),\n    ]);\n\n    const roleExists = employeeRoles.some(r => r.name === validatedFields.data.role);\n    if (!roleExists) {\n        return { message: 'Invalid role selected.' };\n    }\n    const departmentExists = departments.some(d => d.name === validatedFields.data.department);\n    if (!departmentExists) {\n        return { message: 'Invalid department selected.' };\n    }\n\n\n    try {\n        await dbAddEmployee(validatedFields.data as NewEmployee);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add employee.' };\n    }\n\n    revalidatePath('/employees');\n    return { message: 'Successfully added employee.' };\n}\n\n\nconst AddEmployeeRoleSchema = z.object({\n    name: z.string().min(2, 'Role name must be at least 2 characters'),\n});\n\nexport async function addEmployeeRoleAction(formData: FormData) {\n    const validatedFields = AddEmployeeRoleSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddEmployeeRole(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added role '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteEmployeeRoleAction(id: string) {\n    try {\n        await dbDeleteEmployeeRole(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete role.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted role.' };\n}\n\nconst AddDepartmentSchema = z.object({\n    name: z.string().min(2, 'Department name must be at least 2 characters'),\n});\n\nexport async function addDepartmentAction(formData: FormData) {\n    const validatedFields = AddDepartmentSchema.safeParse({\n        name: formData.get('name'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: validatedFields.error.flatten().fieldErrors.name?.[0] ?? 'Invalid name',\n        };\n    }\n\n    try {\n        await dbAddDepartment(validatedFields.data.name);\n    } catch (error) {\n        return { message: 'Database Error: Failed to add department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: `Successfully added department '${validatedFields.data.name}'.` };\n}\n\nexport async function deleteDepartmentAction(id: string) {\n    try {\n        await dbDeleteDepartment(id);\n    } catch (error) {\n        return { message: 'Database Error: Failed to delete department.' };\n    }\n\n    revalidatePath('/setup');\n    return { message: 'Successfully deleted department.' };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1068, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/.next-internal/server/app/quotations/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {addQuotation as '4024aa8fb09e7f873f19d06a31fee6a52f4ca37853'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1120, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/columns.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const columns = registerClientReference(\n    function() { throw new Error(\"Attempted to call columns() from the server but columns is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/quotations/columns.tsx <module evaluation>\",\n    \"columns\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,gEACA","debugId":null}},
    {"offset": {"line": 1134, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/columns.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const columns = registerClientReference(\n    function() { throw new Error(\"Attempted to call columns() from the server but columns is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/quotations/columns.tsx\",\n    \"columns\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,4CACA","debugId":null}},
    {"offset": {"line": 1148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/data-table.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call DataTable() from the server but DataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/quotations/data-table.tsx <module evaluation>\",\n    \"DataTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,mEACA","debugId":null}},
    {"offset": {"line": 1172, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/data-table.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call DataTable() from the server but DataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/quotations/data-table.tsx\",\n    \"DataTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+CACA","debugId":null}},
    {"offset": {"line": 1186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1196, "column": 0}, "map": {"version":3,"sources":["file:///Users/gauravshukla/Downloads/ll/src/app/quotations/page.tsx"],"sourcesContent":["\nimport { getQuotations, getLeads } from \"@/lib/data\";\nimport { columns } from \"./columns\";\nimport { DataTable } from \"./data-table\";\n\nexport default async function QuotationsPage() {\n  const quotations = await getQuotations();\n  const leads = await getLeads();\n\n  const populatedQuotations = quotations.map(q => {\n    const lead = leads.find(l => l.id === q.leadId);\n    return { ...q, leadName: lead?.name || 'N/A', leadCompany: lead?.company || 'N/A' };\n  });\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between space-y-2\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Quotations</h2>\n      </div>\n      <DataTable columns={columns} data={populatedQuotations} />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,aAAa,MAAM,CAAA,GAAA,4IAAA,CAAA,gBAAa,AAAD;IACrC,MAAM,QAAQ,MAAM,CAAA,GAAA,4IAAA,CAAA,WAAQ,AAAD;IAE3B,MAAM,sBAAsB,WAAW,GAAG,CAAC,CAAA;QACzC,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,EAAE,MAAM;QAC9C,OAAO;YAAE,GAAG,CAAC;YAAE,UAAU,MAAM,QAAQ;YAAO,aAAa,MAAM,WAAW;QAAM;IACpF;IAEA,qBACE;;0BACE,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAG,WAAU;8BAAoC;;;;;;;;;;;0BAEpD,8OAAC,0IAAA,CAAA,YAAS;gBAAC,SAAS,oIAAA,CAAA,UAAO;gBAAE,MAAM;;;;;;;;AAGzC","debugId":null}}]
}